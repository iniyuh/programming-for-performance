<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="982" onload="init(evt)" viewBox="0 0 1200 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="982" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="965.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="965.00"> </text><svg id="frames" x="10" width="1180" total_samples="352916"><g><title>_int_malloc (85 samples, 0.02%)</title><rect x="0.0014%" y="885" width="0.0241%" height="15" fill="rgb(227,0,7)" fg:x="5" fg:w="85"/><text x="0.2514%" y="895.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (100 samples, 0.03%)</title><rect x="0.0261%" y="885" width="0.0283%" height="15" fill="rgb(217,0,24)" fg:x="92" fg:w="100"/><text x="0.2761%" y="895.50"></text></g><g><title>[[heap]] (195 samples, 0.06%)</title><rect x="0.0000%" y="901" width="0.0553%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="195"/><text x="0.2500%" y="911.50"></text></g><g><title>__GI___libc_malloc (97 samples, 0.03%)</title><rect x="0.0669%" y="885" width="0.0275%" height="15" fill="rgb(248,212,6)" fg:x="236" fg:w="97"/><text x="0.3169%" y="895.50"></text></g><g><title>_int_free (43 samples, 0.01%)</title><rect x="0.1071%" y="885" width="0.0122%" height="15" fill="rgb(208,68,35)" fg:x="378" fg:w="43"/><text x="0.3571%" y="895.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (856 samples, 0.24%)</title><rect x="0.1207%" y="885" width="0.2426%" height="15" fill="rgb(232,128,0)" fg:x="426" fg:w="856"/><text x="0.3707%" y="895.50"></text></g><g><title>[anon] (1,146 samples, 0.32%)</title><rect x="0.0572%" y="901" width="0.3247%" height="15" fill="rgb(207,160,47)" fg:x="202" fg:w="1146"/><text x="0.3072%" y="911.50"></text></g><g><title>[lab4] (89 samples, 0.03%)</title><rect x="0.3820%" y="901" width="0.0252%" height="15" fill="rgb(228,23,34)" fg:x="1348" fg:w="89"/><text x="0.6320%" y="911.50"></text></g><g><title>_int_free (88 samples, 0.02%)</title><rect x="0.3822%" y="885" width="0.0249%" height="15" fill="rgb(218,30,26)" fg:x="1349" fg:w="88"/><text x="0.6322%" y="895.50"></text></g><g><title>__GI___libc_free (48 samples, 0.01%)</title><rect x="0.4894%" y="885" width="0.0136%" height="15" fill="rgb(220,122,19)" fg:x="1727" fg:w="48"/><text x="0.7394%" y="895.50"></text></g><g><title>__memcmp_avx2_movbe (2,090 samples, 0.59%)</title><rect x="0.5163%" y="885" width="0.5922%" height="15" fill="rgb(250,228,42)" fg:x="1822" fg:w="2090"/><text x="0.7663%" y="895.50"></text></g><g><title>_int_malloc (54 samples, 0.02%)</title><rect x="1.1105%" y="885" width="0.0153%" height="15" fill="rgb(240,193,28)" fg:x="3919" fg:w="54"/><text x="1.3605%" y="895.50"></text></g><g><title>core::slice::memchr::memchr_aligned (12,796 samples, 3.63%)</title><rect x="1.1292%" y="885" width="3.6258%" height="15" fill="rgb(216,20,37)" fg:x="3985" fg:w="12796"/><text x="1.3792%" y="895.50">core..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::align_offset (5,240 samples, 1.48%)</title><rect x="3.2702%" y="869" width="1.4848%" height="15" fill="rgb(206,188,39)" fg:x="11541" fg:w="5240"/><text x="3.5202%" y="879.50"></text></g><g><title>core::ptr::align_offset (5,240 samples, 1.48%)</title><rect x="3.2702%" y="853" width="1.4848%" height="15" fill="rgb(217,207,13)" fg:x="11541" fg:w="5240"/><text x="3.5202%" y="863.50"></text></g><g><title>crossbeam_channel::channel::Receiver&lt;T&gt;::recv (2,636 samples, 0.75%)</title><rect x="4.7564%" y="885" width="0.7469%" height="15" fill="rgb(231,73,38)" fg:x="16786" fg:w="2636"/><text x="5.0064%" y="895.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (50 samples, 0.01%)</title><rect x="5.5033%" y="885" width="0.0142%" height="15" fill="rgb(225,20,46)" fg:x="19422" fg:w="50"/><text x="5.7533%" y="895.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv (2,792 samples, 0.79%)</title><rect x="5.5175%" y="885" width="0.7911%" height="15" fill="rgb(210,31,41)" fg:x="19472" fg:w="2792"/><text x="5.7675%" y="895.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (2,245 samples, 0.64%)</title><rect x="6.3086%" y="885" width="0.6361%" height="15" fill="rgb(221,200,47)" fg:x="22264" fg:w="2245"/><text x="6.5586%" y="895.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::start_send (42 samples, 0.01%)</title><rect x="6.9328%" y="869" width="0.0119%" height="15" fill="rgb(226,26,5)" fg:x="24467" fg:w="42"/><text x="7.1828%" y="879.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (41 samples, 0.01%)</title><rect x="6.9331%" y="853" width="0.0116%" height="15" fill="rgb(249,33,26)" fg:x="24468" fg:w="41"/><text x="7.1831%" y="863.50"></text></g><g><title>[unknown] (23,105 samples, 6.55%)</title><rect x="0.4072%" y="901" width="6.5469%" height="15" fill="rgb(235,183,28)" fg:x="1437" fg:w="23105"/><text x="0.6572%" y="911.50">[unknown]</text></g><g><title>[unknown] (52 samples, 0.01%)</title><rect x="6.9541%" y="885" width="0.0147%" height="15" fill="rgb(221,5,38)" fg:x="24542" fg:w="52"/><text x="7.2041%" y="895.50"></text></g><g><title>[unknown] (50 samples, 0.01%)</title><rect x="6.9546%" y="869" width="0.0142%" height="15" fill="rgb(247,18,42)" fg:x="24544" fg:w="50"/><text x="7.2046%" y="879.50"></text></g><g><title>[unknown] (50 samples, 0.01%)</title><rect x="6.9546%" y="853" width="0.0142%" height="15" fill="rgb(241,131,45)" fg:x="24544" fg:w="50"/><text x="7.2046%" y="863.50"></text></g><g><title>[unknown] (50 samples, 0.01%)</title><rect x="6.9546%" y="837" width="0.0142%" height="15" fill="rgb(249,31,29)" fg:x="24544" fg:w="50"/><text x="7.2046%" y="847.50"></text></g><g><title>[unknown] (50 samples, 0.01%)</title><rect x="6.9546%" y="821" width="0.0142%" height="15" fill="rgb(225,111,53)" fg:x="24544" fg:w="50"/><text x="7.2046%" y="831.50"></text></g><g><title>[unknown] (49 samples, 0.01%)</title><rect x="6.9549%" y="805" width="0.0139%" height="15" fill="rgb(238,160,17)" fg:x="24545" fg:w="49"/><text x="7.2049%" y="815.50"></text></g><g><title>[unknown] (49 samples, 0.01%)</title><rect x="6.9549%" y="789" width="0.0139%" height="15" fill="rgb(214,148,48)" fg:x="24545" fg:w="49"/><text x="7.2049%" y="799.50"></text></g><g><title>[unknown] (49 samples, 0.01%)</title><rect x="6.9549%" y="773" width="0.0139%" height="15" fill="rgb(232,36,49)" fg:x="24545" fg:w="49"/><text x="7.2049%" y="783.50"></text></g><g><title>__GI___libc_malloc (44 samples, 0.01%)</title><rect x="6.9750%" y="469" width="0.0125%" height="15" fill="rgb(209,103,24)" fg:x="24616" fg:w="44"/><text x="7.2250%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (48 samples, 0.01%)</title><rect x="6.9750%" y="565" width="0.0136%" height="15" fill="rgb(229,88,8)" fg:x="24616" fg:w="48"/><text x="7.2250%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (48 samples, 0.01%)</title><rect x="6.9750%" y="549" width="0.0136%" height="15" fill="rgb(213,181,19)" fg:x="24616" fg:w="48"/><text x="7.2250%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (48 samples, 0.01%)</title><rect x="6.9750%" y="533" width="0.0136%" height="15" fill="rgb(254,191,54)" fg:x="24616" fg:w="48"/><text x="7.2250%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (48 samples, 0.01%)</title><rect x="6.9750%" y="517" width="0.0136%" height="15" fill="rgb(241,83,37)" fg:x="24616" fg:w="48"/><text x="7.2250%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (48 samples, 0.01%)</title><rect x="6.9750%" y="501" width="0.0136%" height="15" fill="rgb(233,36,39)" fg:x="24616" fg:w="48"/><text x="7.2250%" y="511.50"></text></g><g><title>alloc::alloc::alloc (48 samples, 0.01%)</title><rect x="6.9750%" y="485" width="0.0136%" height="15" fill="rgb(226,3,54)" fg:x="24616" fg:w="48"/><text x="7.2250%" y="495.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (49 samples, 0.01%)</title><rect x="6.9750%" y="661" width="0.0139%" height="15" fill="rgb(245,192,40)" fg:x="24616" fg:w="49"/><text x="7.2250%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (49 samples, 0.01%)</title><rect x="6.9750%" y="645" width="0.0139%" height="15" fill="rgb(238,167,29)" fg:x="24616" fg:w="49"/><text x="7.2250%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (49 samples, 0.01%)</title><rect x="6.9750%" y="629" width="0.0139%" height="15" fill="rgb(232,182,51)" fg:x="24616" fg:w="49"/><text x="7.2250%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (49 samples, 0.01%)</title><rect x="6.9750%" y="613" width="0.0139%" height="15" fill="rgb(231,60,39)" fg:x="24616" fg:w="49"/><text x="7.2250%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (49 samples, 0.01%)</title><rect x="6.9750%" y="597" width="0.0139%" height="15" fill="rgb(208,69,12)" fg:x="24616" fg:w="49"/><text x="7.2250%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (49 samples, 0.01%)</title><rect x="6.9750%" y="581" width="0.0139%" height="15" fill="rgb(235,93,37)" fg:x="24616" fg:w="49"/><text x="7.2250%" y="591.50"></text></g><g><title>[unknown] (207 samples, 0.06%)</title><rect x="18.6835%" y="533" width="0.0587%" height="15" fill="rgb(213,116,39)" fg:x="65937" fg:w="207"/><text x="18.9335%" y="543.50"></text></g><g><title>[unknown] (180 samples, 0.05%)</title><rect x="18.6911%" y="517" width="0.0510%" height="15" fill="rgb(222,207,29)" fg:x="65964" fg:w="180"/><text x="18.9411%" y="527.50"></text></g><g><title>[unknown] (179 samples, 0.05%)</title><rect x="18.6914%" y="501" width="0.0507%" height="15" fill="rgb(206,96,30)" fg:x="65965" fg:w="179"/><text x="18.9414%" y="511.50"></text></g><g><title>[unknown] (177 samples, 0.05%)</title><rect x="18.6920%" y="485" width="0.0502%" height="15" fill="rgb(218,138,4)" fg:x="65967" fg:w="177"/><text x="18.9420%" y="495.50"></text></g><g><title>[unknown] (166 samples, 0.05%)</title><rect x="18.6951%" y="469" width="0.0470%" height="15" fill="rgb(250,191,14)" fg:x="65978" fg:w="166"/><text x="18.9451%" y="479.50"></text></g><g><title>[unknown] (162 samples, 0.05%)</title><rect x="18.6962%" y="453" width="0.0459%" height="15" fill="rgb(239,60,40)" fg:x="65982" fg:w="162"/><text x="18.9462%" y="463.50"></text></g><g><title>[unknown] (152 samples, 0.04%)</title><rect x="18.6991%" y="437" width="0.0431%" height="15" fill="rgb(206,27,48)" fg:x="65992" fg:w="152"/><text x="18.9491%" y="447.50"></text></g><g><title>[unknown] (127 samples, 0.04%)</title><rect x="18.7062%" y="421" width="0.0360%" height="15" fill="rgb(225,35,8)" fg:x="66017" fg:w="127"/><text x="18.9562%" y="431.50"></text></g><g><title>[unknown] (95 samples, 0.03%)</title><rect x="18.7152%" y="405" width="0.0269%" height="15" fill="rgb(250,213,24)" fg:x="66049" fg:w="95"/><text x="18.9652%" y="415.50"></text></g><g><title>[unknown] (75 samples, 0.02%)</title><rect x="18.7209%" y="389" width="0.0213%" height="15" fill="rgb(247,123,22)" fg:x="66069" fg:w="75"/><text x="18.9709%" y="399.50"></text></g><g><title>[unknown] (71 samples, 0.02%)</title><rect x="18.7220%" y="373" width="0.0201%" height="15" fill="rgb(231,138,38)" fg:x="66073" fg:w="71"/><text x="18.9720%" y="383.50"></text></g><g><title>[unknown] (45 samples, 0.01%)</title><rect x="18.7294%" y="357" width="0.0128%" height="15" fill="rgb(231,145,46)" fg:x="66099" fg:w="45"/><text x="18.9794%" y="367.50"></text></g><g><title>core::array::&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (1,055 samples, 0.30%)</title><rect x="18.7421%" y="533" width="0.2989%" height="15" fill="rgb(251,118,11)" fg:x="66144" fg:w="1055"/><text x="18.9921%" y="543.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,055 samples, 0.30%)</title><rect x="18.7421%" y="517" width="0.2989%" height="15" fill="rgb(217,147,25)" fg:x="66144" fg:w="1055"/><text x="18.9921%" y="527.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,055 samples, 0.30%)</title><rect x="18.7421%" y="501" width="0.2989%" height="15" fill="rgb(247,81,37)" fg:x="66144" fg:w="1055"/><text x="18.9921%" y="511.50"></text></g><g><title>[unknown] (38 samples, 0.01%)</title><rect x="19.2695%" y="485" width="0.0108%" height="15" fill="rgb(209,12,38)" fg:x="68005" fg:w="38"/><text x="19.5195%" y="495.50"></text></g><g><title>__memcmp_avx2_movbe (26,107 samples, 7.40%)</title><rect x="19.2802%" y="485" width="7.3975%" height="15" fill="rgb(227,1,9)" fg:x="68043" fg:w="26107"/><text x="19.5302%" y="495.50">__memcmp_a..</text></g><g><title>[unknown] (227 samples, 0.06%)</title><rect x="26.6134%" y="469" width="0.0643%" height="15" fill="rgb(248,47,43)" fg:x="93923" fg:w="227"/><text x="26.8634%" y="479.50"></text></g><g><title>[unknown] (209 samples, 0.06%)</title><rect x="26.6185%" y="453" width="0.0592%" height="15" fill="rgb(221,10,30)" fg:x="93941" fg:w="209"/><text x="26.8685%" y="463.50"></text></g><g><title>[unknown] (208 samples, 0.06%)</title><rect x="26.6188%" y="437" width="0.0589%" height="15" fill="rgb(210,229,1)" fg:x="93942" fg:w="208"/><text x="26.8688%" y="447.50"></text></g><g><title>[unknown] (207 samples, 0.06%)</title><rect x="26.6191%" y="421" width="0.0587%" height="15" fill="rgb(222,148,37)" fg:x="93943" fg:w="207"/><text x="26.8691%" y="431.50"></text></g><g><title>[unknown] (196 samples, 0.06%)</title><rect x="26.6222%" y="405" width="0.0555%" height="15" fill="rgb(234,67,33)" fg:x="93954" fg:w="196"/><text x="26.8722%" y="415.50"></text></g><g><title>[unknown] (189 samples, 0.05%)</title><rect x="26.6242%" y="389" width="0.0536%" height="15" fill="rgb(247,98,35)" fg:x="93961" fg:w="189"/><text x="26.8742%" y="399.50"></text></g><g><title>[unknown] (176 samples, 0.05%)</title><rect x="26.6279%" y="373" width="0.0499%" height="15" fill="rgb(247,138,52)" fg:x="93974" fg:w="176"/><text x="26.8779%" y="383.50"></text></g><g><title>[unknown] (154 samples, 0.04%)</title><rect x="26.6341%" y="357" width="0.0436%" height="15" fill="rgb(213,79,30)" fg:x="93996" fg:w="154"/><text x="26.8841%" y="367.50"></text></g><g><title>[unknown] (119 samples, 0.03%)</title><rect x="26.6440%" y="341" width="0.0337%" height="15" fill="rgb(246,177,23)" fg:x="94031" fg:w="119"/><text x="26.8940%" y="351.50"></text></g><g><title>[unknown] (91 samples, 0.03%)</title><rect x="26.6520%" y="325" width="0.0258%" height="15" fill="rgb(230,62,27)" fg:x="94059" fg:w="91"/><text x="26.9020%" y="335.50"></text></g><g><title>[unknown] (74 samples, 0.02%)</title><rect x="26.6568%" y="309" width="0.0210%" height="15" fill="rgb(216,154,8)" fg:x="94076" fg:w="74"/><text x="26.9068%" y="319.50"></text></g><g><title>[unknown] (45 samples, 0.01%)</title><rect x="26.6650%" y="293" width="0.0128%" height="15" fill="rgb(244,35,45)" fg:x="94105" fg:w="45"/><text x="26.9150%" y="303.50"></text></g><g><title>[unknown] (36 samples, 0.01%)</title><rect x="26.6675%" y="277" width="0.0102%" height="15" fill="rgb(251,115,12)" fg:x="94114" fg:w="36"/><text x="26.9175%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (26,970 samples, 7.64%)</title><rect x="19.0411%" y="533" width="7.6420%" height="15" fill="rgb(240,54,50)" fg:x="67199" fg:w="26970"/><text x="19.2911%" y="543.50">core::cmp:..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (26,970 samples, 7.64%)</title><rect x="19.0411%" y="517" width="7.6420%" height="15" fill="rgb(233,84,52)" fg:x="67199" fg:w="26970"/><text x="19.2911%" y="527.50">core::slic..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (26,970 samples, 7.64%)</title><rect x="19.0411%" y="501" width="7.6420%" height="15" fill="rgb(207,117,47)" fg:x="67199" fg:w="26970"/><text x="19.2911%" y="511.50">&lt;[A] as co..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (6,577 samples, 1.86%)</title><rect x="26.6831%" y="533" width="1.8636%" height="15" fill="rgb(249,43,39)" fg:x="94169" fg:w="6577"/><text x="26.9331%" y="543.50">c..</text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (6,577 samples, 1.86%)</title><rect x="26.6831%" y="517" width="1.8636%" height="15" fill="rgb(209,38,44)" fg:x="94169" fg:w="6577"/><text x="26.9331%" y="527.50">&lt;..</text></g><g><title>[unknown] (60 samples, 0.02%)</title><rect x="28.5297%" y="501" width="0.0170%" height="15" fill="rgb(236,212,23)" fg:x="100686" fg:w="60"/><text x="28.7797%" y="511.50"></text></g><g><title>[unknown] (54 samples, 0.02%)</title><rect x="28.5314%" y="485" width="0.0153%" height="15" fill="rgb(242,79,21)" fg:x="100692" fg:w="54"/><text x="28.7814%" y="495.50"></text></g><g><title>[unknown] (54 samples, 0.02%)</title><rect x="28.5314%" y="469" width="0.0153%" height="15" fill="rgb(211,96,35)" fg:x="100692" fg:w="54"/><text x="28.7814%" y="479.50"></text></g><g><title>[unknown] (54 samples, 0.02%)</title><rect x="28.5314%" y="453" width="0.0153%" height="15" fill="rgb(253,215,40)" fg:x="100692" fg:w="54"/><text x="28.7814%" y="463.50"></text></g><g><title>[unknown] (51 samples, 0.01%)</title><rect x="28.5323%" y="437" width="0.0145%" height="15" fill="rgb(211,81,21)" fg:x="100695" fg:w="51"/><text x="28.7823%" y="447.50"></text></g><g><title>[unknown] (49 samples, 0.01%)</title><rect x="28.5329%" y="421" width="0.0139%" height="15" fill="rgb(208,190,38)" fg:x="100697" fg:w="49"/><text x="28.7829%" y="431.50"></text></g><g><title>[unknown] (42 samples, 0.01%)</title><rect x="28.5348%" y="405" width="0.0119%" height="15" fill="rgb(235,213,38)" fg:x="100704" fg:w="42"/><text x="28.7848%" y="415.50"></text></g><g><title>[unknown] (36 samples, 0.01%)</title><rect x="28.5365%" y="389" width="0.0102%" height="15" fill="rgb(237,122,38)" fg:x="100710" fg:w="36"/><text x="28.7865%" y="399.50"></text></g><g><title>[unknown] (46 samples, 0.01%)</title><rect x="29.0817%" y="517" width="0.0130%" height="15" fill="rgb(244,218,35)" fg:x="102634" fg:w="46"/><text x="29.3317%" y="527.50"></text></g><g><title>[unknown] (43 samples, 0.01%)</title><rect x="29.0826%" y="501" width="0.0122%" height="15" fill="rgb(240,68,47)" fg:x="102637" fg:w="43"/><text x="29.3326%" y="511.50"></text></g><g><title>[unknown] (42 samples, 0.01%)</title><rect x="29.0828%" y="485" width="0.0119%" height="15" fill="rgb(210,16,53)" fg:x="102638" fg:w="42"/><text x="29.3328%" y="495.50"></text></g><g><title>[unknown] (40 samples, 0.01%)</title><rect x="29.0834%" y="469" width="0.0113%" height="15" fill="rgb(235,124,12)" fg:x="102640" fg:w="40"/><text x="29.3334%" y="479.50"></text></g><g><title>[unknown] (39 samples, 0.01%)</title><rect x="29.0837%" y="453" width="0.0111%" height="15" fill="rgb(224,169,11)" fg:x="102641" fg:w="39"/><text x="29.3337%" y="463.50"></text></g><g><title>[unknown] (39 samples, 0.01%)</title><rect x="29.0837%" y="437" width="0.0111%" height="15" fill="rgb(250,166,2)" fg:x="102641" fg:w="39"/><text x="29.3337%" y="447.50"></text></g><g><title>[unknown] (37 samples, 0.01%)</title><rect x="29.0843%" y="421" width="0.0105%" height="15" fill="rgb(242,216,29)" fg:x="102643" fg:w="37"/><text x="29.3343%" y="431.50"></text></g><g><title>[unknown] (318 samples, 0.09%)</title><rect x="37.9053%" y="501" width="0.0901%" height="15" fill="rgb(230,116,27)" fg:x="133774" fg:w="318"/><text x="38.1553%" y="511.50"></text></g><g><title>[unknown] (288 samples, 0.08%)</title><rect x="37.9138%" y="485" width="0.0816%" height="15" fill="rgb(228,99,48)" fg:x="133804" fg:w="288"/><text x="38.1638%" y="495.50"></text></g><g><title>[unknown] (284 samples, 0.08%)</title><rect x="37.9150%" y="469" width="0.0805%" height="15" fill="rgb(253,11,6)" fg:x="133808" fg:w="284"/><text x="38.1650%" y="479.50"></text></g><g><title>[unknown] (281 samples, 0.08%)</title><rect x="37.9158%" y="453" width="0.0796%" height="15" fill="rgb(247,143,39)" fg:x="133811" fg:w="281"/><text x="38.1658%" y="463.50"></text></g><g><title>[unknown] (267 samples, 0.08%)</title><rect x="37.9198%" y="437" width="0.0757%" height="15" fill="rgb(236,97,10)" fg:x="133825" fg:w="267"/><text x="38.1698%" y="447.50"></text></g><g><title>[unknown] (255 samples, 0.07%)</title><rect x="37.9232%" y="421" width="0.0723%" height="15" fill="rgb(233,208,19)" fg:x="133837" fg:w="255"/><text x="38.1732%" y="431.50"></text></g><g><title>[unknown] (238 samples, 0.07%)</title><rect x="37.9280%" y="405" width="0.0674%" height="15" fill="rgb(216,164,2)" fg:x="133854" fg:w="238"/><text x="38.1780%" y="415.50"></text></g><g><title>[unknown] (215 samples, 0.06%)</title><rect x="37.9345%" y="389" width="0.0609%" height="15" fill="rgb(220,129,5)" fg:x="133877" fg:w="215"/><text x="38.1845%" y="399.50"></text></g><g><title>[unknown] (145 samples, 0.04%)</title><rect x="37.9544%" y="373" width="0.0411%" height="15" fill="rgb(242,17,10)" fg:x="133947" fg:w="145"/><text x="38.2044%" y="383.50"></text></g><g><title>[unknown] (122 samples, 0.03%)</title><rect x="37.9609%" y="357" width="0.0346%" height="15" fill="rgb(242,107,0)" fg:x="133970" fg:w="122"/><text x="38.2109%" y="367.50"></text></g><g><title>[unknown] (99 samples, 0.03%)</title><rect x="37.9674%" y="341" width="0.0281%" height="15" fill="rgb(251,28,31)" fg:x="133993" fg:w="99"/><text x="38.2174%" y="351.50"></text></g><g><title>[unknown] (77 samples, 0.02%)</title><rect x="37.9736%" y="325" width="0.0218%" height="15" fill="rgb(233,223,10)" fg:x="134015" fg:w="77"/><text x="38.2236%" y="335.50"></text></g><g><title>[unknown] (56 samples, 0.02%)</title><rect x="37.9796%" y="309" width="0.0159%" height="15" fill="rgb(215,21,27)" fg:x="134036" fg:w="56"/><text x="38.2296%" y="319.50"></text></g><g><title>[unknown] (38 samples, 0.01%)</title><rect x="37.9847%" y="293" width="0.0108%" height="15" fill="rgb(232,23,21)" fg:x="134054" fg:w="38"/><text x="38.2347%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::repeat_u8 (3,726 samples, 1.06%)</title><rect x="37.9954%" y="501" width="1.0558%" height="15" fill="rgb(244,5,23)" fg:x="134092" fg:w="3726"/><text x="38.2454%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::align_offset (1,628 samples, 0.46%)</title><rect x="39.0512%" y="501" width="0.4613%" height="15" fill="rgb(226,81,46)" fg:x="137818" fg:w="1628"/><text x="39.3012%" y="511.50"></text></g><g><title>core::ptr::align_offset (1,628 samples, 0.46%)</title><rect x="39.0512%" y="485" width="0.4613%" height="15" fill="rgb(247,70,30)" fg:x="137818" fg:w="1628"/><text x="39.3012%" y="495.50"></text></g><g><title>[unknown] (65 samples, 0.02%)</title><rect x="39.4941%" y="469" width="0.0184%" height="15" fill="rgb(212,68,19)" fg:x="139381" fg:w="65"/><text x="39.7441%" y="479.50"></text></g><g><title>[unknown] (59 samples, 0.02%)</title><rect x="39.4958%" y="453" width="0.0167%" height="15" fill="rgb(240,187,13)" fg:x="139387" fg:w="59"/><text x="39.7458%" y="463.50"></text></g><g><title>[unknown] (57 samples, 0.02%)</title><rect x="39.4964%" y="437" width="0.0162%" height="15" fill="rgb(223,113,26)" fg:x="139389" fg:w="57"/><text x="39.7464%" y="447.50"></text></g><g><title>[unknown] (56 samples, 0.02%)</title><rect x="39.4967%" y="421" width="0.0159%" height="15" fill="rgb(206,192,2)" fg:x="139390" fg:w="56"/><text x="39.7467%" y="431.50"></text></g><g><title>[unknown] (56 samples, 0.02%)</title><rect x="39.4967%" y="405" width="0.0159%" height="15" fill="rgb(241,108,4)" fg:x="139390" fg:w="56"/><text x="39.7467%" y="415.50"></text></g><g><title>[unknown] (54 samples, 0.02%)</title><rect x="39.4972%" y="389" width="0.0153%" height="15" fill="rgb(247,173,49)" fg:x="139392" fg:w="54"/><text x="39.7472%" y="399.50"></text></g><g><title>[unknown] (52 samples, 0.01%)</title><rect x="39.4978%" y="373" width="0.0147%" height="15" fill="rgb(224,114,35)" fg:x="139394" fg:w="52"/><text x="39.7478%" y="383.50"></text></g><g><title>[unknown] (47 samples, 0.01%)</title><rect x="39.4992%" y="357" width="0.0133%" height="15" fill="rgb(245,159,27)" fg:x="139399" fg:w="47"/><text x="39.7492%" y="367.50"></text></g><g><title>[unknown] (59 samples, 0.02%)</title><rect x="41.1322%" y="485" width="0.0167%" height="15" fill="rgb(245,172,44)" fg:x="145162" fg:w="59"/><text x="41.3822%" y="495.50"></text></g><g><title>[unknown] (53 samples, 0.02%)</title><rect x="41.1339%" y="469" width="0.0150%" height="15" fill="rgb(236,23,11)" fg:x="145168" fg:w="53"/><text x="41.3839%" y="479.50"></text></g><g><title>[unknown] (53 samples, 0.02%)</title><rect x="41.1339%" y="453" width="0.0150%" height="15" fill="rgb(205,117,38)" fg:x="145168" fg:w="53"/><text x="41.3839%" y="463.50"></text></g><g><title>[unknown] (53 samples, 0.02%)</title><rect x="41.1339%" y="437" width="0.0150%" height="15" fill="rgb(237,72,25)" fg:x="145168" fg:w="53"/><text x="41.3839%" y="447.50"></text></g><g><title>[unknown] (51 samples, 0.01%)</title><rect x="41.1344%" y="421" width="0.0145%" height="15" fill="rgb(244,70,9)" fg:x="145170" fg:w="51"/><text x="41.3844%" y="431.50"></text></g><g><title>[unknown] (51 samples, 0.01%)</title><rect x="41.1344%" y="405" width="0.0145%" height="15" fill="rgb(217,125,39)" fg:x="145170" fg:w="51"/><text x="41.3844%" y="415.50"></text></g><g><title>[unknown] (47 samples, 0.01%)</title><rect x="41.1356%" y="389" width="0.0133%" height="15" fill="rgb(235,36,10)" fg:x="145174" fg:w="47"/><text x="41.3856%" y="399.50"></text></g><g><title>[unknown] (40 samples, 0.01%)</title><rect x="41.1376%" y="373" width="0.0113%" height="15" fill="rgb(251,123,47)" fg:x="145181" fg:w="40"/><text x="41.3876%" y="383.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (10,539 samples, 2.99%)</title><rect x="39.5125%" y="501" width="2.9863%" height="15" fill="rgb(221,13,13)" fg:x="139446" fg:w="10539"/><text x="39.7625%" y="511.50">cor..</text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (4,764 samples, 1.35%)</title><rect x="41.1489%" y="485" width="1.3499%" height="15" fill="rgb(238,131,9)" fg:x="145221" fg:w="4764"/><text x="41.3989%" y="495.50"></text></g><g><title>core::slice::memchr::memchr_aligned (103,725 samples, 29.39%)</title><rect x="29.0973%" y="517" width="29.3908%" height="15" fill="rgb(211,50,8)" fg:x="102689" fg:w="103725"/><text x="29.3473%" y="527.50">core::slice::memchr::memchr_aligned</text></g><g><title>core::slice::memchr::memchr_naive (56,429 samples, 15.99%)</title><rect x="42.4988%" y="501" width="15.9894%" height="15" fill="rgb(245,182,24)" fg:x="149985" fg:w="56429"/><text x="42.7488%" y="511.50">core::slice::memchr::memc..</text></g><g><title>[unknown] (374 samples, 0.11%)</title><rect x="58.3822%" y="485" width="0.1060%" height="15" fill="rgb(242,14,37)" fg:x="206040" fg:w="374"/><text x="58.6322%" y="495.50"></text></g><g><title>[unknown] (343 samples, 0.10%)</title><rect x="58.3909%" y="469" width="0.0972%" height="15" fill="rgb(246,228,12)" fg:x="206071" fg:w="343"/><text x="58.6409%" y="479.50"></text></g><g><title>[unknown] (339 samples, 0.10%)</title><rect x="58.3921%" y="453" width="0.0961%" height="15" fill="rgb(213,55,15)" fg:x="206075" fg:w="339"/><text x="58.6421%" y="463.50"></text></g><g><title>[unknown] (335 samples, 0.09%)</title><rect x="58.3932%" y="437" width="0.0949%" height="15" fill="rgb(209,9,3)" fg:x="206079" fg:w="335"/><text x="58.6432%" y="447.50"></text></g><g><title>[unknown] (320 samples, 0.09%)</title><rect x="58.3975%" y="421" width="0.0907%" height="15" fill="rgb(230,59,30)" fg:x="206094" fg:w="320"/><text x="58.6475%" y="431.50"></text></g><g><title>[unknown] (306 samples, 0.09%)</title><rect x="58.4014%" y="405" width="0.0867%" height="15" fill="rgb(209,121,21)" fg:x="206108" fg:w="306"/><text x="58.6514%" y="415.50"></text></g><g><title>[unknown] (289 samples, 0.08%)</title><rect x="58.4062%" y="389" width="0.0819%" height="15" fill="rgb(220,109,13)" fg:x="206125" fg:w="289"/><text x="58.6562%" y="399.50"></text></g><g><title>[unknown] (250 samples, 0.07%)</title><rect x="58.4173%" y="373" width="0.0708%" height="15" fill="rgb(232,18,1)" fg:x="206164" fg:w="250"/><text x="58.6673%" y="383.50"></text></g><g><title>[unknown] (174 samples, 0.05%)</title><rect x="58.4388%" y="357" width="0.0493%" height="15" fill="rgb(215,41,42)" fg:x="206240" fg:w="174"/><text x="58.6888%" y="367.50"></text></g><g><title>[unknown] (140 samples, 0.04%)</title><rect x="58.4485%" y="341" width="0.0397%" height="15" fill="rgb(224,123,36)" fg:x="206274" fg:w="140"/><text x="58.6985%" y="351.50"></text></g><g><title>[unknown] (110 samples, 0.03%)</title><rect x="58.4570%" y="325" width="0.0312%" height="15" fill="rgb(240,125,3)" fg:x="206304" fg:w="110"/><text x="58.7070%" y="335.50"></text></g><g><title>[unknown] (81 samples, 0.02%)</title><rect x="58.4652%" y="309" width="0.0230%" height="15" fill="rgb(205,98,50)" fg:x="206333" fg:w="81"/><text x="58.7152%" y="319.50"></text></g><g><title>[unknown] (57 samples, 0.02%)</title><rect x="58.4720%" y="293" width="0.0162%" height="15" fill="rgb(205,185,37)" fg:x="206357" fg:w="57"/><text x="58.7220%" y="303.50"></text></g><g><title>[unknown] (41 samples, 0.01%)</title><rect x="58.4765%" y="277" width="0.0116%" height="15" fill="rgb(238,207,15)" fg:x="206373" fg:w="41"/><text x="58.7265%" y="287.50"></text></g><g><title>[unknown] (37 samples, 0.01%)</title><rect x="58.4777%" y="261" width="0.0105%" height="15" fill="rgb(213,199,42)" fg:x="206377" fg:w="37"/><text x="58.7277%" y="271.50"></text></g><g><title>core::slice::memchr::memchr_naive (125 samples, 0.04%)</title><rect x="58.4881%" y="517" width="0.0354%" height="15" fill="rgb(235,201,11)" fg:x="206414" fg:w="125"/><text x="58.7381%" y="527.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (174,687 samples, 49.50%)</title><rect x="9.0279%" y="549" width="49.4982%" height="15" fill="rgb(207,46,11)" fg:x="31861" fg:w="174687"/><text x="9.2779%" y="559.50">&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match</text></g><g><title>core::slice::memchr::memchr (105,802 samples, 29.98%)</title><rect x="28.5467%" y="533" width="29.9794%" height="15" fill="rgb(241,35,35)" fg:x="100746" fg:w="105802"/><text x="28.7967%" y="543.50">core::slice::memchr::memchr</text></g><g><title>[unknown] (45 samples, 0.01%)</title><rect x="58.5261%" y="549" width="0.0128%" height="15" fill="rgb(243,32,47)" fg:x="206548" fg:w="45"/><text x="58.7761%" y="559.50"></text></g><g><title>[unknown] (41 samples, 0.01%)</title><rect x="58.5272%" y="533" width="0.0116%" height="15" fill="rgb(247,202,23)" fg:x="206552" fg:w="41"/><text x="58.7772%" y="543.50"></text></g><g><title>[unknown] (41 samples, 0.01%)</title><rect x="58.5272%" y="517" width="0.0116%" height="15" fill="rgb(219,102,11)" fg:x="206552" fg:w="41"/><text x="58.7772%" y="527.50"></text></g><g><title>[unknown] (41 samples, 0.01%)</title><rect x="58.5272%" y="501" width="0.0116%" height="15" fill="rgb(243,110,44)" fg:x="206552" fg:w="41"/><text x="58.7772%" y="511.50"></text></g><g><title>[unknown] (41 samples, 0.01%)</title><rect x="58.5272%" y="485" width="0.0116%" height="15" fill="rgb(222,74,54)" fg:x="206552" fg:w="41"/><text x="58.7772%" y="495.50"></text></g><g><title>[unknown] (41 samples, 0.01%)</title><rect x="58.5272%" y="469" width="0.0116%" height="15" fill="rgb(216,99,12)" fg:x="206552" fg:w="41"/><text x="58.7772%" y="479.50"></text></g><g><title>[unknown] (40 samples, 0.01%)</title><rect x="58.5275%" y="453" width="0.0113%" height="15" fill="rgb(226,22,26)" fg:x="206553" fg:w="40"/><text x="58.7775%" y="463.50"></text></g><g><title>[unknown] (37 samples, 0.01%)</title><rect x="58.5284%" y="437" width="0.0105%" height="15" fill="rgb(217,163,10)" fg:x="206556" fg:w="37"/><text x="58.7784%" y="447.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (181,880 samples, 51.54%)</title><rect x="7.0096%" y="613" width="51.5363%" height="15" fill="rgb(213,25,53)" fg:x="24738" fg:w="181880"/><text x="7.2596%" y="623.50">&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (181,880 samples, 51.54%)</title><rect x="7.0096%" y="597" width="51.5363%" height="15" fill="rgb(252,105,26)" fg:x="24738" fg:w="181880"/><text x="7.2596%" y="607.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (181,880 samples, 51.54%)</title><rect x="7.0096%" y="581" width="51.5363%" height="15" fill="rgb(220,39,43)" fg:x="24738" fg:w="181880"/><text x="7.2596%" y="591.50">&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (181,880 samples, 51.54%)</title><rect x="7.0096%" y="565" width="51.5363%" height="15" fill="rgb(229,68,48)" fg:x="24738" fg:w="181880"/><text x="7.2596%" y="575.50">core::str::iter::SplitInternal&lt;P&gt;::next_inclusive</text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (717 samples, 0.20%)</title><rect x="59.1305%" y="581" width="0.2032%" height="15" fill="rgb(252,8,32)" fg:x="208681" fg:w="717"/><text x="59.3805%" y="591.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (717 samples, 0.20%)</title><rect x="59.1305%" y="565" width="0.2032%" height="15" fill="rgb(223,20,43)" fg:x="208681" fg:w="717"/><text x="59.3805%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::cycle::Cycle&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::advance_by (184,785 samples, 52.36%)</title><rect x="6.9892%" y="645" width="52.3595%" height="15" fill="rgb(229,81,49)" fg:x="24666" fg:w="184785"/><text x="7.2392%" y="655.50">&lt;core::iter::adapters::cycle::Cycle&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::adv..</text></g><g><title>core::iter::traits::iterator::Iterator::advance_by (184,735 samples, 52.35%)</title><rect x="7.0034%" y="629" width="52.3453%" height="15" fill="rgb(236,28,36)" fg:x="24716" fg:w="184735"/><text x="7.2534%" y="639.50">core::iter::traits::iterator::Iterator::advance_by</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2,833 samples, 0.80%)</title><rect x="58.5459%" y="613" width="0.8027%" height="15" fill="rgb(249,185,26)" fg:x="206618" fg:w="2833"/><text x="58.7959%" y="623.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2,833 samples, 0.80%)</title><rect x="58.5459%" y="597" width="0.8027%" height="15" fill="rgb(249,174,33)" fg:x="206618" fg:w="2833"/><text x="58.7959%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (53 samples, 0.02%)</title><rect x="59.3337%" y="581" width="0.0150%" height="15" fill="rgb(233,201,37)" fg:x="209398" fg:w="53"/><text x="59.5837%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::nth (184,794 samples, 52.36%)</title><rect x="6.9892%" y="661" width="52.3620%" height="15" fill="rgb(221,78,26)" fg:x="24666" fg:w="184794"/><text x="7.2392%" y="671.50">core::iter::traits::iterator::Iterator::nth</text></g><g><title>crossbeam_utils::backoff::Backoff::snooze (318 samples, 0.09%)</title><rect x="59.3748%" y="613" width="0.0901%" height="15" fill="rgb(250,127,30)" fg:x="209543" fg:w="318"/><text x="59.6248%" y="623.50"></text></g><g><title>__GI___sched_yield (318 samples, 0.09%)</title><rect x="59.3748%" y="597" width="0.0901%" height="15" fill="rgb(230,49,44)" fg:x="209543" fg:w="318"/><text x="59.6248%" y="607.50"></text></g><g><title>[unknown] (313 samples, 0.09%)</title><rect x="59.3762%" y="581" width="0.0887%" height="15" fill="rgb(229,67,23)" fg:x="209548" fg:w="313"/><text x="59.6262%" y="591.50"></text></g><g><title>[unknown] (214 samples, 0.06%)</title><rect x="59.4042%" y="565" width="0.0606%" height="15" fill="rgb(249,83,47)" fg:x="209647" fg:w="214"/><text x="59.6542%" y="575.50"></text></g><g><title>[unknown] (207 samples, 0.06%)</title><rect x="59.4062%" y="549" width="0.0587%" height="15" fill="rgb(215,43,3)" fg:x="209654" fg:w="207"/><text x="59.6562%" y="559.50"></text></g><g><title>[unknown] (176 samples, 0.05%)</title><rect x="59.4150%" y="533" width="0.0499%" height="15" fill="rgb(238,154,13)" fg:x="209685" fg:w="176"/><text x="59.6650%" y="543.50"></text></g><g><title>[unknown] (168 samples, 0.05%)</title><rect x="59.4173%" y="517" width="0.0476%" height="15" fill="rgb(219,56,2)" fg:x="209693" fg:w="168"/><text x="59.6673%" y="527.50"></text></g><g><title>[unknown] (156 samples, 0.04%)</title><rect x="59.4207%" y="501" width="0.0442%" height="15" fill="rgb(233,0,4)" fg:x="209705" fg:w="156"/><text x="59.6707%" y="511.50"></text></g><g><title>[unknown] (127 samples, 0.04%)</title><rect x="59.4289%" y="485" width="0.0360%" height="15" fill="rgb(235,30,7)" fg:x="209734" fg:w="127"/><text x="59.6789%" y="495.50"></text></g><g><title>[unknown] (93 samples, 0.03%)</title><rect x="59.4385%" y="469" width="0.0264%" height="15" fill="rgb(250,79,13)" fg:x="209768" fg:w="93"/><text x="59.6885%" y="479.50"></text></g><g><title>[unknown] (79 samples, 0.02%)</title><rect x="59.4425%" y="453" width="0.0224%" height="15" fill="rgb(211,146,34)" fg:x="209782" fg:w="79"/><text x="59.6925%" y="463.50"></text></g><g><title>[unknown] (63 samples, 0.02%)</title><rect x="59.4470%" y="437" width="0.0179%" height="15" fill="rgb(228,22,38)" fg:x="209798" fg:w="63"/><text x="59.6970%" y="447.50"></text></g><g><title>[unknown] (40 samples, 0.01%)</title><rect x="59.4535%" y="421" width="0.0113%" height="15" fill="rgb(235,168,5)" fg:x="209821" fg:w="40"/><text x="59.7035%" y="431.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (586 samples, 0.17%)</title><rect x="59.4654%" y="597" width="0.1660%" height="15" fill="rgb(221,155,16)" fg:x="209863" fg:w="586"/><text x="59.7154%" y="607.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (586 samples, 0.17%)</title><rect x="59.4654%" y="581" width="0.1660%" height="15" fill="rgb(215,215,53)" fg:x="209863" fg:w="586"/><text x="59.7154%" y="591.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (571 samples, 0.16%)</title><rect x="59.4697%" y="565" width="0.1618%" height="15" fill="rgb(223,4,10)" fg:x="209878" fg:w="571"/><text x="59.7197%" y="575.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::start_send (2,155 samples, 0.61%)</title><rect x="59.3623%" y="629" width="0.6106%" height="15" fill="rgb(234,103,6)" fg:x="209499" fg:w="2155"/><text x="59.6123%" y="639.50"></text></g><g><title>crossbeam_utils::backoff::Backoff::spin (1,793 samples, 0.51%)</title><rect x="59.4649%" y="613" width="0.5081%" height="15" fill="rgb(227,97,0)" fg:x="209861" fg:w="1793"/><text x="59.7149%" y="623.50"></text></g><g><title>core::sync::atomic::spin_loop_hint (1,205 samples, 0.34%)</title><rect x="59.6315%" y="597" width="0.3414%" height="15" fill="rgb(234,150,53)" fg:x="210449" fg:w="1205"/><text x="59.8815%" y="607.50"></text></g><g><title>core::hint::spin_loop (1,205 samples, 0.34%)</title><rect x="59.6315%" y="581" width="0.3414%" height="15" fill="rgb(228,201,54)" fg:x="210449" fg:w="1205"/><text x="59.8815%" y="591.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (1,205 samples, 0.34%)</title><rect x="59.6315%" y="565" width="0.3414%" height="15" fill="rgb(222,22,37)" fg:x="210449" fg:w="1205"/><text x="59.8815%" y="575.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (2,187 samples, 0.62%)</title><rect x="59.3609%" y="661" width="0.6197%" height="15" fill="rgb(237,53,32)" fg:x="209494" fg:w="2187"/><text x="59.6109%" y="671.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (2,183 samples, 0.62%)</title><rect x="59.3620%" y="645" width="0.6186%" height="15" fill="rgb(233,25,53)" fg:x="209498" fg:w="2183"/><text x="59.6120%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::{{closure}} (92 samples, 0.03%)</title><rect x="59.9998%" y="357" width="0.0261%" height="15" fill="rgb(210,40,34)" fg:x="211749" fg:w="92"/><text x="60.2498%" y="367.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::{{closure}} (80 samples, 0.02%)</title><rect x="60.0032%" y="341" width="0.0227%" height="15" fill="rgb(241,220,44)" fg:x="211761" fg:w="80"/><text x="60.2532%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as hex::FromHex&gt;::from_hex::{{closure}} (80 samples, 0.02%)</title><rect x="60.0032%" y="325" width="0.0227%" height="15" fill="rgb(235,28,35)" fg:x="211761" fg:w="80"/><text x="60.2532%" y="335.50"></text></g><g><title>hex::val (67 samples, 0.02%)</title><rect x="60.0069%" y="309" width="0.0190%" height="15" fill="rgb(210,56,17)" fg:x="211774" fg:w="67"/><text x="60.2569%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (119 samples, 0.03%)</title><rect x="59.9995%" y="453" width="0.0337%" height="15" fill="rgb(224,130,29)" fg:x="211748" fg:w="119"/><text x="60.2495%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (119 samples, 0.03%)</title><rect x="59.9995%" y="437" width="0.0337%" height="15" fill="rgb(235,212,8)" fg:x="211748" fg:w="119"/><text x="60.2495%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (119 samples, 0.03%)</title><rect x="59.9995%" y="421" width="0.0337%" height="15" fill="rgb(223,33,50)" fg:x="211748" fg:w="119"/><text x="60.2495%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (118 samples, 0.03%)</title><rect x="59.9998%" y="405" width="0.0334%" height="15" fill="rgb(219,149,13)" fg:x="211749" fg:w="118"/><text x="60.2498%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (118 samples, 0.03%)</title><rect x="59.9998%" y="389" width="0.0334%" height="15" fill="rgb(250,156,29)" fg:x="211749" fg:w="118"/><text x="60.2498%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (118 samples, 0.03%)</title><rect x="59.9998%" y="373" width="0.0334%" height="15" fill="rgb(216,193,19)" fg:x="211749" fg:w="118"/><text x="60.2498%" y="383.50"></text></g><g><title>__GI___libc_realloc (49 samples, 0.01%)</title><rect x="60.0364%" y="325" width="0.0139%" height="15" fill="rgb(216,135,14)" fg:x="211878" fg:w="49"/><text x="60.2864%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (57 samples, 0.02%)</title><rect x="60.0358%" y="389" width="0.0162%" height="15" fill="rgb(241,47,5)" fg:x="211876" fg:w="57"/><text x="60.2858%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (56 samples, 0.02%)</title><rect x="60.0361%" y="373" width="0.0159%" height="15" fill="rgb(233,42,35)" fg:x="211877" fg:w="56"/><text x="60.2861%" y="383.50"></text></g><g><title>alloc::alloc::Global::grow_impl (56 samples, 0.02%)</title><rect x="60.0361%" y="357" width="0.0159%" height="15" fill="rgb(231,13,6)" fg:x="211877" fg:w="56"/><text x="60.2861%" y="367.50"></text></g><g><title>alloc::alloc::realloc (56 samples, 0.02%)</title><rect x="60.0361%" y="341" width="0.0159%" height="15" fill="rgb(207,181,40)" fg:x="211877" fg:w="56"/><text x="60.2861%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (61 samples, 0.02%)</title><rect x="60.0352%" y="453" width="0.0173%" height="15" fill="rgb(254,173,49)" fg:x="211874" fg:w="61"/><text x="60.2852%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (61 samples, 0.02%)</title><rect x="60.0352%" y="437" width="0.0173%" height="15" fill="rgb(221,1,38)" fg:x="211874" fg:w="61"/><text x="60.2852%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (61 samples, 0.02%)</title><rect x="60.0352%" y="421" width="0.0173%" height="15" fill="rgb(206,124,46)" fg:x="211874" fg:w="61"/><text x="60.2852%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (61 samples, 0.02%)</title><rect x="60.0352%" y="405" width="0.0173%" height="15" fill="rgb(249,21,11)" fg:x="211874" fg:w="61"/><text x="60.2852%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (208 samples, 0.06%)</title><rect x="59.9976%" y="485" width="0.0589%" height="15" fill="rgb(222,201,40)" fg:x="211741" fg:w="208"/><text x="60.2476%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (208 samples, 0.06%)</title><rect x="59.9976%" y="469" width="0.0589%" height="15" fill="rgb(235,61,29)" fg:x="211741" fg:w="208"/><text x="60.2476%" y="479.50"></text></g><g><title>__GI___libc_malloc (42 samples, 0.01%)</title><rect x="60.0579%" y="373" width="0.0119%" height="15" fill="rgb(219,207,3)" fg:x="211954" fg:w="42"/><text x="60.3079%" y="383.50"></text></g><g><title>hex::decode (264 samples, 0.07%)</title><rect x="59.9953%" y="645" width="0.0748%" height="15" fill="rgb(222,56,46)" fg:x="211733" fg:w="264"/><text x="60.2453%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as hex::FromHex&gt;::from_hex (264 samples, 0.07%)</title><rect x="59.9953%" y="629" width="0.0748%" height="15" fill="rgb(239,76,54)" fg:x="211733" fg:w="264"/><text x="60.2453%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (263 samples, 0.07%)</title><rect x="59.9956%" y="613" width="0.0745%" height="15" fill="rgb(231,124,27)" fg:x="211734" fg:w="263"/><text x="60.2456%" y="623.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (263 samples, 0.07%)</title><rect x="59.9956%" y="597" width="0.0745%" height="15" fill="rgb(249,195,6)" fg:x="211734" fg:w="263"/><text x="60.2456%" y="607.50"></text></g><g><title>core::iter::adapters::try_process (263 samples, 0.07%)</title><rect x="59.9956%" y="581" width="0.0745%" height="15" fill="rgb(237,174,47)" fg:x="211734" fg:w="263"/><text x="60.2456%" y="591.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::{{closure}} (259 samples, 0.07%)</title><rect x="59.9967%" y="565" width="0.0734%" height="15" fill="rgb(206,201,31)" fg:x="211738" fg:w="259"/><text x="60.2467%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (259 samples, 0.07%)</title><rect x="59.9967%" y="549" width="0.0734%" height="15" fill="rgb(231,57,52)" fg:x="211738" fg:w="259"/><text x="60.2467%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (259 samples, 0.07%)</title><rect x="59.9967%" y="533" width="0.0734%" height="15" fill="rgb(248,177,22)" fg:x="211738" fg:w="259"/><text x="60.2467%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (259 samples, 0.07%)</title><rect x="59.9967%" y="517" width="0.0734%" height="15" fill="rgb(215,211,37)" fg:x="211738" fg:w="259"/><text x="60.2467%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (259 samples, 0.07%)</title><rect x="59.9967%" y="501" width="0.0734%" height="15" fill="rgb(241,128,51)" fg:x="211738" fg:w="259"/><text x="60.2467%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (43 samples, 0.01%)</title><rect x="60.0579%" y="485" width="0.0122%" height="15" fill="rgb(227,165,31)" fg:x="211954" fg:w="43"/><text x="60.3079%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (43 samples, 0.01%)</title><rect x="60.0579%" y="469" width="0.0122%" height="15" fill="rgb(228,167,24)" fg:x="211954" fg:w="43"/><text x="60.3079%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (43 samples, 0.01%)</title><rect x="60.0579%" y="453" width="0.0122%" height="15" fill="rgb(228,143,12)" fg:x="211954" fg:w="43"/><text x="60.3079%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (43 samples, 0.01%)</title><rect x="60.0579%" y="437" width="0.0122%" height="15" fill="rgb(249,149,8)" fg:x="211954" fg:w="43"/><text x="60.3079%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (43 samples, 0.01%)</title><rect x="60.0579%" y="421" width="0.0122%" height="15" fill="rgb(243,35,44)" fg:x="211954" fg:w="43"/><text x="60.3079%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (43 samples, 0.01%)</title><rect x="60.0579%" y="405" width="0.0122%" height="15" fill="rgb(246,89,9)" fg:x="211954" fg:w="43"/><text x="60.3079%" y="415.50"></text></g><g><title>alloc::alloc::alloc (43 samples, 0.01%)</title><rect x="60.0579%" y="389" width="0.0122%" height="15" fill="rgb(233,213,13)" fg:x="211954" fg:w="43"/><text x="60.3079%" y="399.50"></text></g><g><title>&lt;T as hex::ToHex&gt;::encode_hex (63 samples, 0.02%)</title><rect x="60.0701%" y="629" width="0.0179%" height="15" fill="rgb(233,141,41)" fg:x="211997" fg:w="63"/><text x="60.3201%" y="639.50"></text></g><g><title>hex::encode_to_iter (63 samples, 0.02%)</title><rect x="60.0701%" y="613" width="0.0179%" height="15" fill="rgb(239,167,4)" fg:x="211997" fg:w="63"/><text x="60.3201%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (63 samples, 0.02%)</title><rect x="60.0701%" y="597" width="0.0179%" height="15" fill="rgb(209,217,16)" fg:x="211997" fg:w="63"/><text x="60.3201%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (63 samples, 0.02%)</title><rect x="60.0701%" y="581" width="0.0179%" height="15" fill="rgb(219,88,35)" fg:x="211997" fg:w="63"/><text x="60.3201%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (63 samples, 0.02%)</title><rect x="60.0701%" y="565" width="0.0179%" height="15" fill="rgb(220,193,23)" fg:x="211997" fg:w="63"/><text x="60.3201%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (47 samples, 0.01%)</title><rect x="60.0746%" y="549" width="0.0133%" height="15" fill="rgb(230,90,52)" fg:x="212013" fg:w="47"/><text x="60.3246%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (47 samples, 0.01%)</title><rect x="60.0746%" y="533" width="0.0133%" height="15" fill="rgb(252,106,19)" fg:x="212013" fg:w="47"/><text x="60.3246%" y="543.50"></text></g><g><title>lab4::checksum::Checksum::update (384 samples, 0.11%)</title><rect x="59.9806%" y="661" width="0.1088%" height="15" fill="rgb(206,74,20)" fg:x="211681" fg:w="384"/><text x="60.2306%" y="671.50"></text></g><g><title>hex::encode (68 samples, 0.02%)</title><rect x="60.0701%" y="645" width="0.0193%" height="15" fill="rgb(230,138,44)" fg:x="211997" fg:w="68"/><text x="60.3201%" y="655.50"></text></g><g><title>sha2::sha256::soft::schedule (39 samples, 0.01%)</title><rect x="60.0987%" y="469" width="0.0111%" height="15" fill="rgb(235,182,43)" fg:x="212098" fg:w="39"/><text x="60.3487%" y="479.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::digest (122 samples, 0.03%)</title><rect x="60.0894%" y="645" width="0.0346%" height="15" fill="rgb(242,16,51)" fg:x="212065" fg:w="122"/><text x="60.3394%" y="655.50"></text></g><g><title>digest::fixed::FixedOutput::finalize_fixed (110 samples, 0.03%)</title><rect x="60.0928%" y="629" width="0.0312%" height="15" fill="rgb(248,9,4)" fg:x="212077" fg:w="110"/><text x="60.3428%" y="639.50"></text></g><g><title>&lt;D as digest::fixed::FixedOutput&gt;::finalize_into (110 samples, 0.03%)</title><rect x="60.0928%" y="613" width="0.0312%" height="15" fill="rgb(210,31,22)" fg:x="212077" fg:w="110"/><text x="60.3428%" y="623.50"></text></g><g><title>&lt;sha2::sha256::Sha256 as digest::fixed::FixedOutputDirty&gt;::finalize_into_dirty (110 samples, 0.03%)</title><rect x="60.0928%" y="597" width="0.0312%" height="15" fill="rgb(239,54,39)" fg:x="212077" fg:w="110"/><text x="60.3428%" y="607.50"></text></g><g><title>sha2::sha256::Engine256::finish (109 samples, 0.03%)</title><rect x="60.0931%" y="581" width="0.0309%" height="15" fill="rgb(230,99,41)" fg:x="212078" fg:w="109"/><text x="60.3431%" y="591.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize&gt;::len64_padding_be (109 samples, 0.03%)</title><rect x="60.0931%" y="565" width="0.0309%" height="15" fill="rgb(253,106,12)" fg:x="212078" fg:w="109"/><text x="60.3431%" y="575.50"></text></g><g><title>sha2::sha256::Engine256::finish::{{closure}} (96 samples, 0.03%)</title><rect x="60.0967%" y="549" width="0.0272%" height="15" fill="rgb(213,46,41)" fg:x="212091" fg:w="96"/><text x="60.3467%" y="559.50"></text></g><g><title>sha2::sha256::compress256 (96 samples, 0.03%)</title><rect x="60.0967%" y="533" width="0.0272%" height="15" fill="rgb(215,133,35)" fg:x="212091" fg:w="96"/><text x="60.3467%" y="543.50"></text></g><g><title>sha2::sha256::x86::compress (96 samples, 0.03%)</title><rect x="60.0967%" y="517" width="0.0272%" height="15" fill="rgb(213,28,5)" fg:x="212091" fg:w="96"/><text x="60.3467%" y="527.50"></text></g><g><title>sha2::sha256::soft::compress (96 samples, 0.03%)</title><rect x="60.0967%" y="501" width="0.0272%" height="15" fill="rgb(215,77,49)" fg:x="212091" fg:w="96"/><text x="60.3467%" y="511.50"></text></g><g><title>sha2::sha256::soft::sha256_digest_block_u32 (90 samples, 0.03%)</title><rect x="60.0984%" y="485" width="0.0255%" height="15" fill="rgb(248,100,22)" fg:x="212097" fg:w="90"/><text x="60.3484%" y="495.50"></text></g><g><title>sha2::sha256::soft::sha256_digest_round_x2 (50 samples, 0.01%)</title><rect x="60.1098%" y="469" width="0.0142%" height="15" fill="rgb(208,67,9)" fg:x="212137" fg:w="50"/><text x="60.3598%" y="479.50"></text></g><g><title>lab4::checksum::Checksum::with_sha256 (203 samples, 0.06%)</title><rect x="60.0894%" y="661" width="0.0575%" height="15" fill="rgb(219,133,21)" fg:x="212065" fg:w="203"/><text x="60.3394%" y="671.50"></text></g><g><title>hex::encode (81 samples, 0.02%)</title><rect x="60.1239%" y="645" width="0.0230%" height="15" fill="rgb(246,46,29)" fg:x="212187" fg:w="81"/><text x="60.3739%" y="655.50"></text></g><g><title>&lt;T as hex::ToHex&gt;::encode_hex (81 samples, 0.02%)</title><rect x="60.1239%" y="629" width="0.0230%" height="15" fill="rgb(246,185,52)" fg:x="212187" fg:w="81"/><text x="60.3739%" y="639.50"></text></g><g><title>hex::encode_to_iter (81 samples, 0.02%)</title><rect x="60.1239%" y="613" width="0.0230%" height="15" fill="rgb(252,136,11)" fg:x="212187" fg:w="81"/><text x="60.3739%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (81 samples, 0.02%)</title><rect x="60.1239%" y="597" width="0.0230%" height="15" fill="rgb(219,138,53)" fg:x="212187" fg:w="81"/><text x="60.3739%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (81 samples, 0.02%)</title><rect x="60.1239%" y="581" width="0.0230%" height="15" fill="rgb(211,51,23)" fg:x="212187" fg:w="81"/><text x="60.3739%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (81 samples, 0.02%)</title><rect x="60.1239%" y="565" width="0.0230%" height="15" fill="rgb(247,221,28)" fg:x="212187" fg:w="81"/><text x="60.3739%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (56 samples, 0.02%)</title><rect x="60.1310%" y="549" width="0.0159%" height="15" fill="rgb(251,222,45)" fg:x="212212" fg:w="56"/><text x="60.3810%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (56 samples, 0.02%)</title><rect x="60.1310%" y="533" width="0.0159%" height="15" fill="rgb(217,162,53)" fg:x="212212" fg:w="56"/><text x="60.3810%" y="543.50"></text></g><g><title>malloc_consolidate (37 samples, 0.01%)</title><rect x="60.1628%" y="469" width="0.0105%" height="15" fill="rgb(229,93,14)" fg:x="212324" fg:w="37"/><text x="60.4128%" y="479.50"></text></g><g><title>__GI___libc_malloc (89 samples, 0.03%)</title><rect x="60.1494%" y="501" width="0.0252%" height="15" fill="rgb(209,67,49)" fg:x="212277" fg:w="89"/><text x="60.3994%" y="511.50"></text></g><g><title>_int_malloc (62 samples, 0.02%)</title><rect x="60.1571%" y="485" width="0.0176%" height="15" fill="rgb(213,87,29)" fg:x="212304" fg:w="62"/><text x="60.4071%" y="495.50"></text></g><g><title>alloc::string::String::with_capacity (106 samples, 0.03%)</title><rect x="60.1486%" y="629" width="0.0300%" height="15" fill="rgb(205,151,52)" fg:x="212274" fg:w="106"/><text x="60.3986%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (106 samples, 0.03%)</title><rect x="60.1486%" y="613" width="0.0300%" height="15" fill="rgb(253,215,39)" fg:x="212274" fg:w="106"/><text x="60.3986%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (106 samples, 0.03%)</title><rect x="60.1486%" y="597" width="0.0300%" height="15" fill="rgb(221,220,41)" fg:x="212274" fg:w="106"/><text x="60.3986%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (106 samples, 0.03%)</title><rect x="60.1486%" y="581" width="0.0300%" height="15" fill="rgb(218,133,21)" fg:x="212274" fg:w="106"/><text x="60.3986%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (106 samples, 0.03%)</title><rect x="60.1486%" y="565" width="0.0300%" height="15" fill="rgb(221,193,43)" fg:x="212274" fg:w="106"/><text x="60.3986%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (103 samples, 0.03%)</title><rect x="60.1494%" y="549" width="0.0292%" height="15" fill="rgb(240,128,52)" fg:x="212277" fg:w="103"/><text x="60.3994%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (103 samples, 0.03%)</title><rect x="60.1494%" y="533" width="0.0292%" height="15" fill="rgb(253,114,12)" fg:x="212277" fg:w="103"/><text x="60.3994%" y="543.50"></text></g><g><title>alloc::alloc::alloc (103 samples, 0.03%)</title><rect x="60.1494%" y="517" width="0.0292%" height="15" fill="rgb(215,223,47)" fg:x="212277" fg:w="103"/><text x="60.3994%" y="527.50"></text></g><g><title>[unknown] (248 samples, 0.07%)</title><rect x="60.1789%" y="533" width="0.0703%" height="15" fill="rgb(248,225,23)" fg:x="212381" fg:w="248"/><text x="60.4289%" y="543.50"></text></g><g><title>[unknown] (197 samples, 0.06%)</title><rect x="60.1934%" y="517" width="0.0558%" height="15" fill="rgb(250,108,0)" fg:x="212432" fg:w="197"/><text x="60.4434%" y="527.50"></text></g><g><title>[unknown] (192 samples, 0.05%)</title><rect x="60.1948%" y="501" width="0.0544%" height="15" fill="rgb(228,208,7)" fg:x="212437" fg:w="192"/><text x="60.4448%" y="511.50"></text></g><g><title>[unknown] (172 samples, 0.05%)</title><rect x="60.2004%" y="485" width="0.0487%" height="15" fill="rgb(244,45,10)" fg:x="212457" fg:w="172"/><text x="60.4504%" y="495.50"></text></g><g><title>[unknown] (156 samples, 0.04%)</title><rect x="60.2050%" y="469" width="0.0442%" height="15" fill="rgb(207,125,25)" fg:x="212473" fg:w="156"/><text x="60.4550%" y="479.50"></text></g><g><title>[unknown] (143 samples, 0.04%)</title><rect x="60.2087%" y="453" width="0.0405%" height="15" fill="rgb(210,195,18)" fg:x="212486" fg:w="143"/><text x="60.4587%" y="463.50"></text></g><g><title>[unknown] (132 samples, 0.04%)</title><rect x="60.2118%" y="437" width="0.0374%" height="15" fill="rgb(249,80,12)" fg:x="212497" fg:w="132"/><text x="60.4618%" y="447.50"></text></g><g><title>[unknown] (113 samples, 0.03%)</title><rect x="60.2172%" y="421" width="0.0320%" height="15" fill="rgb(221,65,9)" fg:x="212516" fg:w="113"/><text x="60.4672%" y="431.50"></text></g><g><title>[unknown] (93 samples, 0.03%)</title><rect x="60.2228%" y="405" width="0.0264%" height="15" fill="rgb(235,49,36)" fg:x="212536" fg:w="93"/><text x="60.4728%" y="415.50"></text></g><g><title>[unknown] (72 samples, 0.02%)</title><rect x="60.2288%" y="389" width="0.0204%" height="15" fill="rgb(225,32,20)" fg:x="212557" fg:w="72"/><text x="60.4788%" y="399.50"></text></g><g><title>[unknown] (55 samples, 0.02%)</title><rect x="60.2336%" y="373" width="0.0156%" height="15" fill="rgb(215,141,46)" fg:x="212574" fg:w="55"/><text x="60.4836%" y="383.50"></text></g><g><title>__close (251 samples, 0.07%)</title><rect x="60.1786%" y="549" width="0.0711%" height="15" fill="rgb(250,160,47)" fg:x="212380" fg:w="251"/><text x="60.4286%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::fs::File&gt; (258 samples, 0.07%)</title><rect x="60.1786%" y="629" width="0.0731%" height="15" fill="rgb(216,222,40)" fg:x="212380" fg:w="258"/><text x="60.4286%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::unix::fs::File&gt; (258 samples, 0.07%)</title><rect x="60.1786%" y="613" width="0.0731%" height="15" fill="rgb(234,217,39)" fg:x="212380" fg:w="258"/><text x="60.4286%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::unix::fd::FileDesc&gt; (258 samples, 0.07%)</title><rect x="60.1786%" y="597" width="0.0731%" height="15" fill="rgb(207,178,40)" fg:x="212380" fg:w="258"/><text x="60.4286%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::os::fd::owned::OwnedFd&gt; (258 samples, 0.07%)</title><rect x="60.1786%" y="581" width="0.0731%" height="15" fill="rgb(221,136,13)" fg:x="212380" fg:w="258"/><text x="60.4286%" y="591.50"></text></g><g><title>&lt;std::os::fd::owned::OwnedFd as core::ops::drop::Drop&gt;::drop (258 samples, 0.07%)</title><rect x="60.1786%" y="565" width="0.0731%" height="15" fill="rgb(249,199,10)" fg:x="212380" fg:w="258"/><text x="60.4286%" y="575.50"></text></g><g><title>std::fs::File::metadata (391 samples, 0.11%)</title><rect x="60.2517%" y="629" width="0.1108%" height="15" fill="rgb(249,222,13)" fg:x="212638" fg:w="391"/><text x="60.5017%" y="639.50"></text></g><g><title>std::sys::unix::fs::File::file_attr (391 samples, 0.11%)</title><rect x="60.2517%" y="613" width="0.1108%" height="15" fill="rgb(244,185,38)" fg:x="212638" fg:w="391"/><text x="60.5017%" y="623.50"></text></g><g><title>std::sys::unix::fs::try_statx (390 samples, 0.11%)</title><rect x="60.2520%" y="597" width="0.1105%" height="15" fill="rgb(236,202,9)" fg:x="212639" fg:w="390"/><text x="60.5020%" y="607.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (380 samples, 0.11%)</title><rect x="60.2548%" y="581" width="0.1077%" height="15" fill="rgb(250,229,37)" fg:x="212649" fg:w="380"/><text x="60.5048%" y="591.50"></text></g><g><title>statx (375 samples, 0.11%)</title><rect x="60.2563%" y="565" width="0.1063%" height="15" fill="rgb(206,174,23)" fg:x="212654" fg:w="375"/><text x="60.5063%" y="575.50"></text></g><g><title>[unknown] (370 samples, 0.10%)</title><rect x="60.2577%" y="549" width="0.1048%" height="15" fill="rgb(211,33,43)" fg:x="212659" fg:w="370"/><text x="60.5077%" y="559.50"></text></g><g><title>[unknown] (326 samples, 0.09%)</title><rect x="60.2701%" y="533" width="0.0924%" height="15" fill="rgb(245,58,50)" fg:x="212703" fg:w="326"/><text x="60.5201%" y="543.50"></text></g><g><title>[unknown] (317 samples, 0.09%)</title><rect x="60.2727%" y="517" width="0.0898%" height="15" fill="rgb(244,68,36)" fg:x="212712" fg:w="317"/><text x="60.5227%" y="527.50"></text></g><g><title>[unknown] (299 samples, 0.08%)</title><rect x="60.2778%" y="501" width="0.0847%" height="15" fill="rgb(232,229,15)" fg:x="212730" fg:w="299"/><text x="60.5278%" y="511.50"></text></g><g><title>[unknown] (292 samples, 0.08%)</title><rect x="60.2798%" y="485" width="0.0827%" height="15" fill="rgb(254,30,23)" fg:x="212737" fg:w="292"/><text x="60.5298%" y="495.50"></text></g><g><title>[unknown] (277 samples, 0.08%)</title><rect x="60.2840%" y="469" width="0.0785%" height="15" fill="rgb(235,160,14)" fg:x="212752" fg:w="277"/><text x="60.5340%" y="479.50"></text></g><g><title>[unknown] (257 samples, 0.07%)</title><rect x="60.2897%" y="453" width="0.0728%" height="15" fill="rgb(212,155,44)" fg:x="212772" fg:w="257"/><text x="60.5397%" y="463.50"></text></g><g><title>[unknown] (226 samples, 0.06%)</title><rect x="60.2985%" y="437" width="0.0640%" height="15" fill="rgb(226,2,50)" fg:x="212803" fg:w="226"/><text x="60.5485%" y="447.50"></text></g><g><title>[unknown] (146 samples, 0.04%)</title><rect x="60.3212%" y="421" width="0.0414%" height="15" fill="rgb(234,177,6)" fg:x="212883" fg:w="146"/><text x="60.5712%" y="431.50"></text></g><g><title>[unknown] (85 samples, 0.02%)</title><rect x="60.3384%" y="405" width="0.0241%" height="15" fill="rgb(217,24,9)" fg:x="212944" fg:w="85"/><text x="60.5884%" y="415.50"></text></g><g><title>[unknown] (49 samples, 0.01%)</title><rect x="60.3486%" y="389" width="0.0139%" height="15" fill="rgb(220,13,46)" fg:x="212980" fg:w="49"/><text x="60.5986%" y="399.50"></text></g><g><title>[unknown] (2,156 samples, 0.61%)</title><rect x="60.3764%" y="453" width="0.6109%" height="15" fill="rgb(239,221,27)" fg:x="213078" fg:w="2156"/><text x="60.6264%" y="463.50"></text></g><g><title>[unknown] (2,121 samples, 0.60%)</title><rect x="60.3863%" y="437" width="0.6010%" height="15" fill="rgb(222,198,25)" fg:x="213113" fg:w="2121"/><text x="60.6363%" y="447.50"></text></g><g><title>[unknown] (2,115 samples, 0.60%)</title><rect x="60.3880%" y="421" width="0.5993%" height="15" fill="rgb(211,99,13)" fg:x="213119" fg:w="2115"/><text x="60.6380%" y="431.50"></text></g><g><title>[unknown] (2,092 samples, 0.59%)</title><rect x="60.3945%" y="405" width="0.5928%" height="15" fill="rgb(232,111,31)" fg:x="213142" fg:w="2092"/><text x="60.6445%" y="415.50"></text></g><g><title>[unknown] (2,089 samples, 0.59%)</title><rect x="60.3954%" y="389" width="0.5919%" height="15" fill="rgb(245,82,37)" fg:x="213145" fg:w="2089"/><text x="60.6454%" y="399.50"></text></g><g><title>[unknown] (2,067 samples, 0.59%)</title><rect x="60.4016%" y="373" width="0.5857%" height="15" fill="rgb(227,149,46)" fg:x="213167" fg:w="2067"/><text x="60.6516%" y="383.50"></text></g><g><title>[unknown] (2,005 samples, 0.57%)</title><rect x="60.4192%" y="357" width="0.5681%" height="15" fill="rgb(218,36,50)" fg:x="213229" fg:w="2005"/><text x="60.6692%" y="367.50"></text></g><g><title>[unknown] (1,963 samples, 0.56%)</title><rect x="60.4311%" y="341" width="0.5562%" height="15" fill="rgb(226,80,48)" fg:x="213271" fg:w="1963"/><text x="60.6811%" y="351.50"></text></g><g><title>[unknown] (1,870 samples, 0.53%)</title><rect x="60.4574%" y="325" width="0.5299%" height="15" fill="rgb(238,224,15)" fg:x="213364" fg:w="1870"/><text x="60.7074%" y="335.50"></text></g><g><title>[unknown] (1,819 samples, 0.52%)</title><rect x="60.4719%" y="309" width="0.5154%" height="15" fill="rgb(241,136,10)" fg:x="213415" fg:w="1819"/><text x="60.7219%" y="319.50"></text></g><g><title>[unknown] (1,698 samples, 0.48%)</title><rect x="60.5062%" y="293" width="0.4811%" height="15" fill="rgb(208,32,45)" fg:x="213536" fg:w="1698"/><text x="60.7562%" y="303.50"></text></g><g><title>[unknown] (1,587 samples, 0.45%)</title><rect x="60.5376%" y="277" width="0.4497%" height="15" fill="rgb(207,135,9)" fg:x="213647" fg:w="1587"/><text x="60.7876%" y="287.50"></text></g><g><title>[unknown] (1,496 samples, 0.42%)</title><rect x="60.5634%" y="261" width="0.4239%" height="15" fill="rgb(206,86,44)" fg:x="213738" fg:w="1496"/><text x="60.8134%" y="271.50"></text></g><g><title>[unknown] (1,398 samples, 0.40%)</title><rect x="60.5912%" y="245" width="0.3961%" height="15" fill="rgb(245,177,15)" fg:x="213836" fg:w="1398"/><text x="60.8412%" y="255.50"></text></g><g><title>[unknown] (1,212 samples, 0.34%)</title><rect x="60.6439%" y="229" width="0.3434%" height="15" fill="rgb(206,64,50)" fg:x="214022" fg:w="1212"/><text x="60.8939%" y="239.50"></text></g><g><title>[unknown] (1,059 samples, 0.30%)</title><rect x="60.6872%" y="213" width="0.3001%" height="15" fill="rgb(234,36,40)" fg:x="214175" fg:w="1059"/><text x="60.9372%" y="223.50"></text></g><g><title>[unknown] (965 samples, 0.27%)</title><rect x="60.7139%" y="197" width="0.2734%" height="15" fill="rgb(213,64,8)" fg:x="214269" fg:w="965"/><text x="60.9639%" y="207.50"></text></g><g><title>[unknown] (883 samples, 0.25%)</title><rect x="60.7371%" y="181" width="0.2502%" height="15" fill="rgb(210,75,36)" fg:x="214351" fg:w="883"/><text x="60.9871%" y="191.50"></text></g><g><title>[unknown] (837 samples, 0.24%)</title><rect x="60.7502%" y="165" width="0.2372%" height="15" fill="rgb(229,88,21)" fg:x="214397" fg:w="837"/><text x="61.0002%" y="175.50"></text></g><g><title>[unknown] (759 samples, 0.22%)</title><rect x="60.7723%" y="149" width="0.2151%" height="15" fill="rgb(252,204,47)" fg:x="214475" fg:w="759"/><text x="61.0223%" y="159.50"></text></g><g><title>[unknown] (720 samples, 0.20%)</title><rect x="60.7833%" y="133" width="0.2040%" height="15" fill="rgb(208,77,27)" fg:x="214514" fg:w="720"/><text x="61.0333%" y="143.50"></text></g><g><title>[unknown] (680 samples, 0.19%)</title><rect x="60.7946%" y="117" width="0.1927%" height="15" fill="rgb(221,76,26)" fg:x="214554" fg:w="680"/><text x="61.0446%" y="127.50"></text></g><g><title>[unknown] (606 samples, 0.17%)</title><rect x="60.8156%" y="101" width="0.1717%" height="15" fill="rgb(225,139,18)" fg:x="214628" fg:w="606"/><text x="61.0656%" y="111.50"></text></g><g><title>[unknown] (537 samples, 0.15%)</title><rect x="60.8352%" y="85" width="0.1522%" height="15" fill="rgb(230,137,11)" fg:x="214697" fg:w="537"/><text x="61.0852%" y="95.50"></text></g><g><title>[unknown] (476 samples, 0.13%)</title><rect x="60.8524%" y="69" width="0.1349%" height="15" fill="rgb(212,28,1)" fg:x="214758" fg:w="476"/><text x="61.1024%" y="79.50"></text></g><g><title>[unknown] (386 samples, 0.11%)</title><rect x="60.8779%" y="53" width="0.1094%" height="15" fill="rgb(248,164,17)" fg:x="214848" fg:w="386"/><text x="61.1279%" y="63.50"></text></g><g><title>[unknown] (50 samples, 0.01%)</title><rect x="60.9731%" y="37" width="0.0142%" height="15" fill="rgb(222,171,42)" fg:x="215184" fg:w="50"/><text x="61.2231%" y="47.50"></text></g><g><title>std::sys::unix::cvt_r (2,192 samples, 0.62%)</title><rect x="60.3693%" y="501" width="0.6211%" height="15" fill="rgb(243,84,45)" fg:x="213053" fg:w="2192"/><text x="60.6193%" y="511.50"></text></g><g><title>std::sys::unix::fs::File::open_c::{{closure}} (2,187 samples, 0.62%)</title><rect x="60.3707%" y="485" width="0.6197%" height="15" fill="rgb(252,49,23)" fg:x="213058" fg:w="2187"/><text x="60.6207%" y="495.50"></text></g><g><title>__libc_open64 (2,187 samples, 0.62%)</title><rect x="60.3707%" y="469" width="0.6197%" height="15" fill="rgb(215,19,7)" fg:x="213058" fg:w="2187"/><text x="60.6207%" y="479.50"></text></g><g><title>std::fs::File::open (2,217 samples, 0.63%)</title><rect x="60.3625%" y="629" width="0.6282%" height="15" fill="rgb(238,81,41)" fg:x="213029" fg:w="2217"/><text x="60.6125%" y="639.50"></text></g><g><title>std::fs::OpenOptions::open (2,217 samples, 0.63%)</title><rect x="60.3625%" y="613" width="0.6282%" height="15" fill="rgb(210,199,37)" fg:x="213029" fg:w="2217"/><text x="60.6125%" y="623.50"></text></g><g><title>std::fs::OpenOptions::_open (2,217 samples, 0.63%)</title><rect x="60.3625%" y="597" width="0.6282%" height="15" fill="rgb(244,192,49)" fg:x="213029" fg:w="2217"/><text x="60.6125%" y="607.50"></text></g><g><title>std::sys::unix::fs::File::open (2,215 samples, 0.63%)</title><rect x="60.3631%" y="581" width="0.6276%" height="15" fill="rgb(226,211,11)" fg:x="213031" fg:w="2215"/><text x="60.6131%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (2,215 samples, 0.63%)</title><rect x="60.3631%" y="565" width="0.6276%" height="15" fill="rgb(236,162,54)" fg:x="213031" fg:w="2215"/><text x="60.6131%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2,215 samples, 0.63%)</title><rect x="60.3631%" y="549" width="0.6276%" height="15" fill="rgb(220,229,9)" fg:x="213031" fg:w="2215"/><text x="60.6131%" y="559.50"></text></g><g><title>std::sys::unix::fs::File::open::{{closure}} (2,198 samples, 0.62%)</title><rect x="60.3679%" y="533" width="0.6228%" height="15" fill="rgb(250,87,22)" fg:x="213048" fg:w="2198"/><text x="60.6179%" y="543.50"></text></g><g><title>std::sys::unix::fs::File::open_c (2,194 samples, 0.62%)</title><rect x="60.3690%" y="517" width="0.6217%" height="15" fill="rgb(239,43,17)" fg:x="213052" fg:w="2194"/><text x="60.6190%" y="527.50"></text></g><g><title>core::str::converts::from_utf8 (72 samples, 0.02%)</title><rect x="60.9907%" y="597" width="0.0204%" height="15" fill="rgb(231,177,25)" fg:x="215246" fg:w="72"/><text x="61.2407%" y="607.50"></text></g><g><title>core::str::validations::run_utf8_validation (69 samples, 0.02%)</title><rect x="60.9916%" y="581" width="0.0196%" height="15" fill="rgb(219,179,1)" fg:x="215249" fg:w="69"/><text x="61.2416%" y="591.50"></text></g><g><title>[unknown] (385 samples, 0.11%)</title><rect x="61.0134%" y="469" width="0.1091%" height="15" fill="rgb(238,219,53)" fg:x="215326" fg:w="385"/><text x="61.2634%" y="479.50"></text></g><g><title>[unknown] (349 samples, 0.10%)</title><rect x="61.0236%" y="453" width="0.0989%" height="15" fill="rgb(232,167,36)" fg:x="215362" fg:w="349"/><text x="61.2736%" y="463.50"></text></g><g><title>[unknown] (342 samples, 0.10%)</title><rect x="61.0256%" y="437" width="0.0969%" height="15" fill="rgb(244,19,51)" fg:x="215369" fg:w="342"/><text x="61.2756%" y="447.50"></text></g><g><title>[unknown] (319 samples, 0.09%)</title><rect x="61.0321%" y="421" width="0.0904%" height="15" fill="rgb(224,6,22)" fg:x="215392" fg:w="319"/><text x="61.2821%" y="431.50"></text></g><g><title>[unknown] (310 samples, 0.09%)</title><rect x="61.0346%" y="405" width="0.0878%" height="15" fill="rgb(224,145,5)" fg:x="215401" fg:w="310"/><text x="61.2846%" y="415.50"></text></g><g><title>[unknown] (298 samples, 0.08%)</title><rect x="61.0380%" y="389" width="0.0844%" height="15" fill="rgb(234,130,49)" fg:x="215413" fg:w="298"/><text x="61.2880%" y="399.50"></text></g><g><title>[unknown] (278 samples, 0.08%)</title><rect x="61.0437%" y="373" width="0.0788%" height="15" fill="rgb(254,6,2)" fg:x="215433" fg:w="278"/><text x="61.2937%" y="383.50"></text></g><g><title>[unknown] (259 samples, 0.07%)</title><rect x="61.0491%" y="357" width="0.0734%" height="15" fill="rgb(208,96,46)" fg:x="215452" fg:w="259"/><text x="61.2991%" y="367.50"></text></g><g><title>[unknown] (239 samples, 0.07%)</title><rect x="61.0548%" y="341" width="0.0677%" height="15" fill="rgb(239,3,39)" fg:x="215472" fg:w="239"/><text x="61.3048%" y="351.50"></text></g><g><title>[unknown] (203 samples, 0.06%)</title><rect x="61.0650%" y="325" width="0.0575%" height="15" fill="rgb(233,210,1)" fg:x="215508" fg:w="203"/><text x="61.3150%" y="335.50"></text></g><g><title>[unknown] (153 samples, 0.04%)</title><rect x="61.0791%" y="309" width="0.0434%" height="15" fill="rgb(244,137,37)" fg:x="215558" fg:w="153"/><text x="61.3291%" y="319.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (391 samples, 0.11%)</title><rect x="61.0123%" y="565" width="0.1108%" height="15" fill="rgb(240,136,2)" fg:x="215322" fg:w="391"/><text x="61.2623%" y="575.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read_buf (391 samples, 0.11%)</title><rect x="61.0123%" y="549" width="0.1108%" height="15" fill="rgb(239,18,37)" fg:x="215322" fg:w="391"/><text x="61.2623%" y="559.50"></text></g><g><title>std::sys::unix::fs::File::read_buf (391 samples, 0.11%)</title><rect x="61.0123%" y="533" width="0.1108%" height="15" fill="rgb(218,185,22)" fg:x="215322" fg:w="391"/><text x="61.2623%" y="543.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read_buf (391 samples, 0.11%)</title><rect x="61.0123%" y="517" width="0.1108%" height="15" fill="rgb(225,218,4)" fg:x="215322" fg:w="391"/><text x="61.2623%" y="527.50"></text></g><g><title>__libc_read (391 samples, 0.11%)</title><rect x="61.0123%" y="501" width="0.1108%" height="15" fill="rgb(230,182,32)" fg:x="215322" fg:w="391"/><text x="61.2623%" y="511.50"></text></g><g><title>__libc_read (387 samples, 0.11%)</title><rect x="61.0134%" y="485" width="0.1097%" height="15" fill="rgb(242,56,43)" fg:x="215326" fg:w="387"/><text x="61.2634%" y="495.50"></text></g><g><title>[unknown] (136 samples, 0.04%)</title><rect x="61.1264%" y="453" width="0.0385%" height="15" fill="rgb(233,99,24)" fg:x="215725" fg:w="136"/><text x="61.3764%" y="463.50"></text></g><g><title>[unknown] (101 samples, 0.03%)</title><rect x="61.1364%" y="437" width="0.0286%" height="15" fill="rgb(234,209,42)" fg:x="215760" fg:w="101"/><text x="61.3864%" y="447.50"></text></g><g><title>[unknown] (96 samples, 0.03%)</title><rect x="61.1378%" y="421" width="0.0272%" height="15" fill="rgb(227,7,12)" fg:x="215765" fg:w="96"/><text x="61.3878%" y="431.50"></text></g><g><title>[unknown] (81 samples, 0.02%)</title><rect x="61.1420%" y="405" width="0.0230%" height="15" fill="rgb(245,203,43)" fg:x="215780" fg:w="81"/><text x="61.3920%" y="415.50"></text></g><g><title>[unknown] (74 samples, 0.02%)</title><rect x="61.1440%" y="389" width="0.0210%" height="15" fill="rgb(238,205,33)" fg:x="215787" fg:w="74"/><text x="61.3940%" y="399.50"></text></g><g><title>[unknown] (65 samples, 0.02%)</title><rect x="61.1466%" y="373" width="0.0184%" height="15" fill="rgb(231,56,7)" fg:x="215796" fg:w="65"/><text x="61.3966%" y="383.50"></text></g><g><title>[unknown] (55 samples, 0.02%)</title><rect x="61.1494%" y="357" width="0.0156%" height="15" fill="rgb(244,186,29)" fg:x="215806" fg:w="55"/><text x="61.3994%" y="367.50"></text></g><g><title>[unknown] (46 samples, 0.01%)</title><rect x="61.1519%" y="341" width="0.0130%" height="15" fill="rgb(234,111,31)" fg:x="215815" fg:w="46"/><text x="61.4019%" y="351.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (141 samples, 0.04%)</title><rect x="61.1256%" y="549" width="0.0400%" height="15" fill="rgb(241,149,10)" fg:x="215722" fg:w="141"/><text x="61.3756%" y="559.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read (141 samples, 0.04%)</title><rect x="61.1256%" y="533" width="0.0400%" height="15" fill="rgb(249,206,44)" fg:x="215722" fg:w="141"/><text x="61.3756%" y="543.50"></text></g><g><title>std::sys::unix::fs::File::read (141 samples, 0.04%)</title><rect x="61.1256%" y="517" width="0.0400%" height="15" fill="rgb(251,153,30)" fg:x="215722" fg:w="141"/><text x="61.3756%" y="527.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (141 samples, 0.04%)</title><rect x="61.1256%" y="501" width="0.0400%" height="15" fill="rgb(239,152,38)" fg:x="215722" fg:w="141"/><text x="61.3756%" y="511.50"></text></g><g><title>__libc_read (141 samples, 0.04%)</title><rect x="61.1256%" y="485" width="0.0400%" height="15" fill="rgb(249,139,47)" fg:x="215722" fg:w="141"/><text x="61.3756%" y="495.50"></text></g><g><title>__libc_read (139 samples, 0.04%)</title><rect x="61.1262%" y="469" width="0.0394%" height="15" fill="rgb(244,64,35)" fg:x="215724" fg:w="139"/><text x="61.3762%" y="479.50"></text></g><g><title>std::io::default_read_to_end (552 samples, 0.16%)</title><rect x="61.0111%" y="581" width="0.1564%" height="15" fill="rgb(216,46,15)" fg:x="215318" fg:w="552"/><text x="61.2611%" y="591.50"></text></g><g><title>std::io::default_read_to_end::small_probe_read (148 samples, 0.04%)</title><rect x="61.1256%" y="565" width="0.0419%" height="15" fill="rgb(250,74,19)" fg:x="215722" fg:w="148"/><text x="61.3756%" y="575.50"></text></g><g><title>std::fs::read_to_string (3,603 samples, 1.02%)</title><rect x="60.1469%" y="661" width="1.0209%" height="15" fill="rgb(249,42,33)" fg:x="212268" fg:w="3603"/><text x="60.3969%" y="671.50"></text></g><g><title>std::fs::read_to_string::inner (3,597 samples, 1.02%)</title><rect x="60.1486%" y="645" width="1.0192%" height="15" fill="rgb(242,149,17)" fg:x="212274" fg:w="3597"/><text x="60.3986%" y="655.50"></text></g><g><title>std::io::default_read_to_string (625 samples, 0.18%)</title><rect x="60.9907%" y="629" width="0.1771%" height="15" fill="rgb(244,29,21)" fg:x="215246" fg:w="625"/><text x="61.2407%" y="639.50"></text></g><g><title>std::io::append_to_string (625 samples, 0.18%)</title><rect x="60.9907%" y="613" width="0.1771%" height="15" fill="rgb(220,130,37)" fg:x="215246" fg:w="625"/><text x="61.2407%" y="623.50"></text></g><g><title>std::io::default_read_to_string::{{closure}} (553 samples, 0.16%)</title><rect x="61.0111%" y="597" width="0.1567%" height="15" fill="rgb(211,67,2)" fg:x="215318" fg:w="553"/><text x="61.2611%" y="607.50"></text></g><g><title>lab4::package::PackageDownloader::run (191,266 samples, 54.20%)</title><rect x="6.9750%" y="677" width="54.1959%" height="15" fill="rgb(235,68,52)" fg:x="24616" fg:w="191266"/><text x="7.2250%" y="687.50">lab4::package::PackageDownloader::run</text></g><g><title>[unknown] (37 samples, 0.01%)</title><rect x="62.6347%" y="661" width="0.0105%" height="15" fill="rgb(246,142,3)" fg:x="221048" fg:w="37"/><text x="62.8847%" y="671.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1,489 samples, 0.42%)</title><rect x="62.6458%" y="661" width="0.4219%" height="15" fill="rgb(241,25,7)" fg:x="221087" fg:w="1489"/><text x="62.8958%" y="671.50"></text></g><g><title>&lt;crossbeam_channel::counter::Receiver&lt;C&gt; as core::ops::deref::Deref&gt;::deref (1,364 samples, 0.39%)</title><rect x="63.2964%" y="645" width="0.3865%" height="15" fill="rgb(242,119,39)" fg:x="223383" fg:w="1364"/><text x="63.5464%" y="655.50"></text></g><g><title>crossbeam_channel::counter::Receiver&lt;C&gt;::counter (1,364 samples, 0.39%)</title><rect x="63.2964%" y="629" width="0.3865%" height="15" fill="rgb(241,98,45)" fg:x="223383" fg:w="1364"/><text x="63.5464%" y="639.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (9,391 samples, 2.66%)</title><rect x="63.6891%" y="645" width="2.6610%" height="15" fill="rgb(254,28,30)" fg:x="224769" fg:w="9391"/><text x="63.9391%" y="655.50">co..</text></g><g><title>[unknown] (44 samples, 0.01%)</title><rect x="66.3376%" y="629" width="0.0125%" height="15" fill="rgb(241,142,54)" fg:x="234116" fg:w="44"/><text x="66.5876%" y="639.50"></text></g><g><title>[unknown] (40 samples, 0.01%)</title><rect x="66.3387%" y="613" width="0.0113%" height="15" fill="rgb(222,85,15)" fg:x="234120" fg:w="40"/><text x="66.5887%" y="623.50"></text></g><g><title>[unknown] (39 samples, 0.01%)</title><rect x="66.3390%" y="597" width="0.0111%" height="15" fill="rgb(210,85,47)" fg:x="234121" fg:w="39"/><text x="66.5890%" y="607.50"></text></g><g><title>[unknown] (39 samples, 0.01%)</title><rect x="66.3390%" y="581" width="0.0111%" height="15" fill="rgb(224,206,25)" fg:x="234121" fg:w="39"/><text x="66.5890%" y="591.50"></text></g><g><title>[unknown] (36 samples, 0.01%)</title><rect x="66.3399%" y="565" width="0.0102%" height="15" fill="rgb(243,201,19)" fg:x="234124" fg:w="36"/><text x="66.5899%" y="575.50"></text></g><g><title>&lt;crossbeam_channel::select::Token as core::default::Default&gt;::default (1,535 samples, 0.43%)</title><rect x="68.1210%" y="629" width="0.4349%" height="15" fill="rgb(236,59,4)" fg:x="240410" fg:w="1535"/><text x="68.3710%" y="639.50"></text></g><g><title>[unknown] (41 samples, 0.01%)</title><rect x="68.5560%" y="629" width="0.0116%" height="15" fill="rgb(254,179,45)" fg:x="241945" fg:w="41"/><text x="68.8060%" y="639.50"></text></g><g><title>[unknown] (38 samples, 0.01%)</title><rect x="68.5568%" y="613" width="0.0108%" height="15" fill="rgb(226,14,10)" fg:x="241948" fg:w="38"/><text x="68.8068%" y="623.50"></text></g><g><title>[unknown] (38 samples, 0.01%)</title><rect x="68.5568%" y="597" width="0.0108%" height="15" fill="rgb(244,27,41)" fg:x="241948" fg:w="38"/><text x="68.8068%" y="607.50"></text></g><g><title>[unknown] (36 samples, 0.01%)</title><rect x="68.5574%" y="581" width="0.0102%" height="15" fill="rgb(235,35,32)" fg:x="241950" fg:w="36"/><text x="68.8074%" y="591.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1,034 samples, 0.29%)</title><rect x="68.5676%" y="629" width="0.2930%" height="15" fill="rgb(218,68,31)" fg:x="241986" fg:w="1034"/><text x="68.8176%" y="639.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (1,671 samples, 0.47%)</title><rect x="69.3258%" y="613" width="0.4735%" height="15" fill="rgb(207,120,37)" fg:x="244662" fg:w="1671"/><text x="69.5758%" y="623.50"></text></g><g><title>core::ptr::read (1,671 samples, 0.47%)</title><rect x="69.3258%" y="597" width="0.4735%" height="15" fill="rgb(227,98,0)" fg:x="244662" fg:w="1671"/><text x="69.5758%" y="607.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (776 samples, 0.22%)</title><rect x="69.7993%" y="613" width="0.2199%" height="15" fill="rgb(207,7,3)" fg:x="246333" fg:w="776"/><text x="70.0493%" y="623.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (776 samples, 0.22%)</title><rect x="69.7993%" y="597" width="0.2199%" height="15" fill="rgb(206,98,19)" fg:x="246333" fg:w="776"/><text x="70.0493%" y="607.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (776 samples, 0.22%)</title><rect x="69.7993%" y="581" width="0.2199%" height="15" fill="rgb(217,5,26)" fg:x="246333" fg:w="776"/><text x="70.0493%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (11,226 samples, 3.18%)</title><rect x="70.0192%" y="613" width="3.1809%" height="15" fill="rgb(235,190,38)" fg:x="247109" fg:w="11226"/><text x="70.2692%" y="623.50">cor..</text></g><g><title>core::sync::atomic::atomic_or (11,226 samples, 3.18%)</title><rect x="70.0192%" y="597" width="3.1809%" height="15" fill="rgb(247,86,24)" fg:x="247109" fg:w="11226"/><text x="70.2692%" y="607.50">cor..</text></g><g><title>[unknown] (52 samples, 0.01%)</title><rect x="73.1854%" y="581" width="0.0147%" height="15" fill="rgb(205,101,16)" fg:x="258283" fg:w="52"/><text x="73.4354%" y="591.50"></text></g><g><title>[unknown] (45 samples, 0.01%)</title><rect x="73.1874%" y="565" width="0.0128%" height="15" fill="rgb(246,168,33)" fg:x="258290" fg:w="45"/><text x="73.4374%" y="575.50"></text></g><g><title>[unknown] (44 samples, 0.01%)</title><rect x="73.1877%" y="549" width="0.0125%" height="15" fill="rgb(231,114,1)" fg:x="258291" fg:w="44"/><text x="73.4377%" y="559.50"></text></g><g><title>[unknown] (43 samples, 0.01%)</title><rect x="73.1880%" y="533" width="0.0122%" height="15" fill="rgb(207,184,53)" fg:x="258292" fg:w="43"/><text x="73.4380%" y="543.50"></text></g><g><title>[unknown] (39 samples, 0.01%)</title><rect x="73.1891%" y="517" width="0.0111%" height="15" fill="rgb(224,95,51)" fg:x="258296" fg:w="39"/><text x="73.4391%" y="527.50"></text></g><g><title>[unknown] (39 samples, 0.01%)</title><rect x="73.1891%" y="501" width="0.0111%" height="15" fill="rgb(212,188,45)" fg:x="258296" fg:w="39"/><text x="73.4391%" y="511.50"></text></g><g><title>[unknown] (37 samples, 0.01%)</title><rect x="73.1897%" y="485" width="0.0105%" height="15" fill="rgb(223,154,38)" fg:x="258298" fg:w="37"/><text x="73.4397%" y="495.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (49 samples, 0.01%)</title><rect x="73.3342%" y="597" width="0.0139%" height="15" fill="rgb(251,22,52)" fg:x="258808" fg:w="49"/><text x="73.5842%" y="607.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (49 samples, 0.01%)</title><rect x="73.3342%" y="581" width="0.0139%" height="15" fill="rgb(229,209,22)" fg:x="258808" fg:w="49"/><text x="73.5842%" y="591.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (36 samples, 0.01%)</title><rect x="73.3378%" y="565" width="0.0102%" height="15" fill="rgb(234,138,34)" fg:x="258821" fg:w="36"/><text x="73.5878%" y="575.50"></text></g><g><title>__GI___libc_free (444 samples, 0.13%)</title><rect x="73.3500%" y="517" width="0.1258%" height="15" fill="rgb(212,95,11)" fg:x="258864" fg:w="444"/><text x="73.6000%" y="527.50"></text></g><g><title>__rdl_dealloc (57 samples, 0.02%)</title><rect x="73.4758%" y="517" width="0.0162%" height="15" fill="rgb(240,179,47)" fg:x="259308" fg:w="57"/><text x="73.7258%" y="527.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (57 samples, 0.02%)</title><rect x="73.4758%" y="501" width="0.0162%" height="15" fill="rgb(240,163,11)" fg:x="259308" fg:w="57"/><text x="73.7258%" y="511.50"></text></g><g><title>__rust_dealloc (76 samples, 0.02%)</title><rect x="73.4920%" y="517" width="0.0215%" height="15" fill="rgb(236,37,12)" fg:x="259365" fg:w="76"/><text x="73.7420%" y="527.50"></text></g><g><title>core::mem::drop (2,515 samples, 0.71%)</title><rect x="73.3480%" y="597" width="0.7126%" height="15" fill="rgb(232,164,16)" fg:x="258857" fg:w="2515"/><text x="73.5980%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;crossbeam_channel::flavors::list::Block&lt;lab4::Event&gt;&gt;&gt; (2,515 samples, 0.71%)</title><rect x="73.3480%" y="581" width="0.7126%" height="15" fill="rgb(244,205,15)" fg:x="258857" fg:w="2515"/><text x="73.5980%" y="591.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,515 samples, 0.71%)</title><rect x="73.3480%" y="565" width="0.7126%" height="15" fill="rgb(223,117,47)" fg:x="258857" fg:w="2515"/><text x="73.5980%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2,515 samples, 0.71%)</title><rect x="73.3480%" y="549" width="0.7126%" height="15" fill="rgb(244,107,35)" fg:x="258857" fg:w="2515"/><text x="73.5980%" y="559.50"></text></g><g><title>alloc::alloc::dealloc (2,515 samples, 0.71%)</title><rect x="73.3480%" y="533" width="0.7126%" height="15" fill="rgb(205,140,8)" fg:x="258857" fg:w="2515"/><text x="73.5980%" y="543.50"></text></g><g><title>_int_free (1,931 samples, 0.55%)</title><rect x="73.5135%" y="517" width="0.5472%" height="15" fill="rgb(228,84,46)" fg:x="259441" fg:w="1931"/><text x="73.7635%" y="527.50"></text></g><g><title>unlink_chunk.isra.0 (127 samples, 0.04%)</title><rect x="74.0247%" y="501" width="0.0360%" height="15" fill="rgb(254,188,9)" fg:x="261245" fg:w="127"/><text x="74.2747%" y="511.50"></text></g><g><title>core::cell::UnsafeCell&lt;T&gt;::get (126 samples, 0.04%)</title><rect x="74.0607%" y="581" width="0.0357%" height="15" fill="rgb(206,112,54)" fg:x="261372" fg:w="126"/><text x="74.3107%" y="591.50"></text></g><g><title>crossbeam_channel::flavors::list::Block&lt;T&gt;::destroy (3,578 samples, 1.01%)</title><rect x="73.2001%" y="613" width="1.0138%" height="15" fill="rgb(216,84,49)" fg:x="258335" fg:w="3578"/><text x="73.4501%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (541 samples, 0.15%)</title><rect x="74.0607%" y="597" width="0.1533%" height="15" fill="rgb(214,194,35)" fg:x="261372" fg:w="541"/><text x="74.3107%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_load (415 samples, 0.12%)</title><rect x="74.0964%" y="581" width="0.1176%" height="15" fill="rgb(249,28,3)" fg:x="261498" fg:w="415"/><text x="74.3464%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (573 samples, 0.16%)</title><rect x="74.2783%" y="597" width="0.1624%" height="15" fill="rgb(222,56,52)" fg:x="262140" fg:w="573"/><text x="74.5283%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_load (573 samples, 0.16%)</title><rect x="74.2783%" y="581" width="0.1624%" height="15" fill="rgb(245,217,50)" fg:x="262140" fg:w="573"/><text x="74.5283%" y="591.50"></text></g><g><title>__GI___sched_yield (2,513 samples, 0.71%)</title><rect x="74.4415%" y="581" width="0.7121%" height="15" fill="rgb(213,201,24)" fg:x="262716" fg:w="2513"/><text x="74.6915%" y="591.50"></text></g><g><title>[unknown] (2,455 samples, 0.70%)</title><rect x="74.4579%" y="565" width="0.6956%" height="15" fill="rgb(248,116,28)" fg:x="262774" fg:w="2455"/><text x="74.7079%" y="575.50"></text></g><g><title>[unknown] (1,474 samples, 0.42%)</title><rect x="74.7359%" y="549" width="0.4177%" height="15" fill="rgb(219,72,43)" fg:x="263755" fg:w="1474"/><text x="74.9859%" y="559.50"></text></g><g><title>[unknown] (1,420 samples, 0.40%)</title><rect x="74.7512%" y="533" width="0.4024%" height="15" fill="rgb(209,138,14)" fg:x="263809" fg:w="1420"/><text x="75.0012%" y="543.50"></text></g><g><title>[unknown] (1,029 samples, 0.29%)</title><rect x="74.8620%" y="517" width="0.2916%" height="15" fill="rgb(222,18,33)" fg:x="264200" fg:w="1029"/><text x="75.1120%" y="527.50"></text></g><g><title>[unknown] (961 samples, 0.27%)</title><rect x="74.8813%" y="501" width="0.2723%" height="15" fill="rgb(213,199,7)" fg:x="264268" fg:w="961"/><text x="75.1313%" y="511.50"></text></g><g><title>[unknown] (896 samples, 0.25%)</title><rect x="74.8997%" y="485" width="0.2539%" height="15" fill="rgb(250,110,10)" fg:x="264333" fg:w="896"/><text x="75.1497%" y="495.50"></text></g><g><title>[unknown] (667 samples, 0.19%)</title><rect x="74.9646%" y="469" width="0.1890%" height="15" fill="rgb(248,123,6)" fg:x="264562" fg:w="667"/><text x="75.2146%" y="479.50"></text></g><g><title>[unknown] (487 samples, 0.14%)</title><rect x="75.0156%" y="453" width="0.1380%" height="15" fill="rgb(206,91,31)" fg:x="264742" fg:w="487"/><text x="75.2656%" y="463.50"></text></g><g><title>[unknown] (366 samples, 0.10%)</title><rect x="75.0499%" y="437" width="0.1037%" height="15" fill="rgb(211,154,13)" fg:x="264863" fg:w="366"/><text x="75.2999%" y="447.50"></text></g><g><title>[unknown] (215 samples, 0.06%)</title><rect x="75.0927%" y="421" width="0.0609%" height="15" fill="rgb(225,148,7)" fg:x="265014" fg:w="215"/><text x="75.3427%" y="431.50"></text></g><g><title>[unknown] (99 samples, 0.03%)</title><rect x="75.1255%" y="405" width="0.0281%" height="15" fill="rgb(220,160,43)" fg:x="265130" fg:w="99"/><text x="75.3755%" y="415.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::read (22,219 samples, 6.30%)</title><rect x="68.8688%" y="629" width="6.2958%" height="15" fill="rgb(213,52,39)" fg:x="243049" fg:w="22219"/><text x="69.1188%" y="639.50">crossbea..</text></g><g><title>crossbeam_channel::flavors::list::Slot&lt;T&gt;::wait_write (3,355 samples, 0.95%)</title><rect x="74.2140%" y="613" width="0.9507%" height="15" fill="rgb(243,137,7)" fg:x="261913" fg:w="3355"/><text x="74.4640%" y="623.50"></text></g><g><title>crossbeam_utils::backoff::Backoff::snooze (2,555 samples, 0.72%)</title><rect x="74.4407%" y="597" width="0.7240%" height="15" fill="rgb(230,79,13)" fg:x="262713" fg:w="2555"/><text x="74.6907%" y="607.50"></text></g><g><title>[unknown] (106 samples, 0.03%)</title><rect x="77.6224%" y="613" width="0.0300%" height="15" fill="rgb(247,105,23)" fg:x="273942" fg:w="106"/><text x="77.8724%" y="623.50"></text></g><g><title>[unknown] (101 samples, 0.03%)</title><rect x="77.6239%" y="597" width="0.0286%" height="15" fill="rgb(223,179,41)" fg:x="273947" fg:w="101"/><text x="77.8739%" y="607.50"></text></g><g><title>[unknown] (101 samples, 0.03%)</title><rect x="77.6239%" y="581" width="0.0286%" height="15" fill="rgb(218,9,34)" fg:x="273947" fg:w="101"/><text x="77.8739%" y="591.50"></text></g><g><title>[unknown] (98 samples, 0.03%)</title><rect x="77.6247%" y="565" width="0.0278%" height="15" fill="rgb(222,106,8)" fg:x="273950" fg:w="98"/><text x="77.8747%" y="575.50"></text></g><g><title>[unknown] (92 samples, 0.03%)</title><rect x="77.6264%" y="549" width="0.0261%" height="15" fill="rgb(211,220,0)" fg:x="273956" fg:w="92"/><text x="77.8764%" y="559.50"></text></g><g><title>[unknown] (91 samples, 0.03%)</title><rect x="77.6267%" y="533" width="0.0258%" height="15" fill="rgb(229,52,16)" fg:x="273957" fg:w="91"/><text x="77.8767%" y="543.50"></text></g><g><title>[unknown] (82 samples, 0.02%)</title><rect x="77.6292%" y="517" width="0.0232%" height="15" fill="rgb(212,155,18)" fg:x="273966" fg:w="82"/><text x="77.8792%" y="527.50"></text></g><g><title>[unknown] (73 samples, 0.02%)</title><rect x="77.6318%" y="501" width="0.0207%" height="15" fill="rgb(242,21,14)" fg:x="273975" fg:w="73"/><text x="77.8818%" y="511.50"></text></g><g><title>[unknown] (66 samples, 0.02%)</title><rect x="77.6338%" y="485" width="0.0187%" height="15" fill="rgb(222,19,48)" fg:x="273982" fg:w="66"/><text x="77.8838%" y="495.50"></text></g><g><title>[unknown] (59 samples, 0.02%)</title><rect x="77.6358%" y="469" width="0.0167%" height="15" fill="rgb(232,45,27)" fg:x="273989" fg:w="59"/><text x="77.8858%" y="479.50"></text></g><g><title>[unknown] (51 samples, 0.01%)</title><rect x="77.6380%" y="453" width="0.0145%" height="15" fill="rgb(249,103,42)" fg:x="273997" fg:w="51"/><text x="77.8880%" y="463.50"></text></g><g><title>[unknown] (37 samples, 0.01%)</title><rect x="77.6420%" y="437" width="0.0105%" height="15" fill="rgb(246,81,33)" fg:x="274011" fg:w="37"/><text x="77.8920%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (520 samples, 0.15%)</title><rect x="77.6525%" y="613" width="0.1473%" height="15" fill="rgb(252,33,42)" fg:x="274048" fg:w="520"/><text x="77.9025%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_load (520 samples, 0.15%)</title><rect x="77.6525%" y="597" width="0.1473%" height="15" fill="rgb(209,212,41)" fg:x="274048" fg:w="520"/><text x="77.9025%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (8,465 samples, 2.40%)</title><rect x="77.8018%" y="613" width="2.3986%" height="15" fill="rgb(207,154,6)" fg:x="274575" fg:w="8465"/><text x="78.0518%" y="623.50">co..</text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (8,465 samples, 2.40%)</title><rect x="77.8018%" y="597" width="2.3986%" height="15" fill="rgb(223,64,47)" fg:x="274575" fg:w="8465"/><text x="78.0518%" y="607.50">co..</text></g><g><title>core::sync::atomic::AtomicUsize::load (1,732 samples, 0.49%)</title><rect x="80.2004%" y="613" width="0.4908%" height="15" fill="rgb(211,161,38)" fg:x="283040" fg:w="1732"/><text x="80.4504%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_load (1,732 samples, 0.49%)</title><rect x="80.2004%" y="597" width="0.4908%" height="15" fill="rgb(219,138,40)" fg:x="283040" fg:w="1732"/><text x="80.4504%" y="607.50"></text></g><g><title>core::sync::atomic::fence (1,548 samples, 0.44%)</title><rect x="80.6968%" y="613" width="0.4386%" height="15" fill="rgb(241,228,46)" fg:x="284792" fg:w="1548"/><text x="80.9468%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (44 samples, 0.01%)</title><rect x="81.1496%" y="597" width="0.0125%" height="15" fill="rgb(223,209,38)" fg:x="286390" fg:w="44"/><text x="81.3996%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_load (44 samples, 0.01%)</title><rect x="81.1496%" y="581" width="0.0125%" height="15" fill="rgb(236,164,45)" fg:x="286390" fg:w="44"/><text x="81.3996%" y="591.50"></text></g><g><title>__GI___sched_yield (98 samples, 0.03%)</title><rect x="81.1624%" y="581" width="0.0278%" height="15" fill="rgb(231,15,5)" fg:x="286435" fg:w="98"/><text x="81.4124%" y="591.50"></text></g><g><title>[unknown] (98 samples, 0.03%)</title><rect x="81.1624%" y="565" width="0.0278%" height="15" fill="rgb(252,35,15)" fg:x="286435" fg:w="98"/><text x="81.4124%" y="575.50"></text></g><g><title>[unknown] (58 samples, 0.02%)</title><rect x="81.1737%" y="549" width="0.0164%" height="15" fill="rgb(248,181,18)" fg:x="286475" fg:w="58"/><text x="81.4237%" y="559.50"></text></g><g><title>[unknown] (58 samples, 0.02%)</title><rect x="81.1737%" y="533" width="0.0164%" height="15" fill="rgb(233,39,42)" fg:x="286475" fg:w="58"/><text x="81.4237%" y="543.50"></text></g><g><title>[unknown] (44 samples, 0.01%)</title><rect x="81.1777%" y="517" width="0.0125%" height="15" fill="rgb(238,110,33)" fg:x="286489" fg:w="44"/><text x="81.4277%" y="527.50"></text></g><g><title>[unknown] (36 samples, 0.01%)</title><rect x="81.1799%" y="501" width="0.0102%" height="15" fill="rgb(233,195,10)" fg:x="286497" fg:w="36"/><text x="81.4299%" y="511.50"></text></g><g><title>crossbeam_channel::flavors::list::Block&lt;T&gt;::wait_next (195 samples, 0.06%)</title><rect x="81.1355%" y="613" width="0.0553%" height="15" fill="rgb(254,105,3)" fg:x="286340" fg:w="195"/><text x="81.3855%" y="623.50"></text></g><g><title>crossbeam_utils::backoff::Backoff::snooze (101 samples, 0.03%)</title><rect x="81.1621%" y="597" width="0.0286%" height="15" fill="rgb(221,225,9)" fg:x="286434" fg:w="101"/><text x="81.4121%" y="607.50"></text></g><g><title>__GI___sched_yield (1,029 samples, 0.29%)</title><rect x="81.1924%" y="597" width="0.2916%" height="15" fill="rgb(224,227,45)" fg:x="286541" fg:w="1029"/><text x="81.4424%" y="607.50"></text></g><g><title>[unknown] (1,020 samples, 0.29%)</title><rect x="81.1950%" y="581" width="0.2890%" height="15" fill="rgb(229,198,43)" fg:x="286550" fg:w="1020"/><text x="81.4450%" y="591.50"></text></g><g><title>[unknown] (683 samples, 0.19%)</title><rect x="81.2904%" y="565" width="0.1935%" height="15" fill="rgb(206,209,35)" fg:x="286887" fg:w="683"/><text x="81.5404%" y="575.50"></text></g><g><title>[unknown] (660 samples, 0.19%)</title><rect x="81.2970%" y="549" width="0.1870%" height="15" fill="rgb(245,195,53)" fg:x="286910" fg:w="660"/><text x="81.5470%" y="559.50"></text></g><g><title>[unknown] (535 samples, 0.15%)</title><rect x="81.3324%" y="533" width="0.1516%" height="15" fill="rgb(240,92,26)" fg:x="287035" fg:w="535"/><text x="81.5824%" y="543.50"></text></g><g><title>[unknown] (497 samples, 0.14%)</title><rect x="81.3432%" y="517" width="0.1408%" height="15" fill="rgb(207,40,23)" fg:x="287073" fg:w="497"/><text x="81.5932%" y="527.50"></text></g><g><title>[unknown] (468 samples, 0.13%)</title><rect x="81.3514%" y="501" width="0.1326%" height="15" fill="rgb(223,111,35)" fg:x="287102" fg:w="468"/><text x="81.6014%" y="511.50"></text></g><g><title>[unknown] (366 samples, 0.10%)</title><rect x="81.3803%" y="485" width="0.1037%" height="15" fill="rgb(229,147,28)" fg:x="287204" fg:w="366"/><text x="81.6303%" y="495.50"></text></g><g><title>[unknown] (244 samples, 0.07%)</title><rect x="81.4148%" y="469" width="0.0691%" height="15" fill="rgb(211,29,28)" fg:x="287326" fg:w="244"/><text x="81.6648%" y="479.50"></text></g><g><title>[unknown] (179 samples, 0.05%)</title><rect x="81.4333%" y="453" width="0.0507%" height="15" fill="rgb(228,72,33)" fg:x="287391" fg:w="179"/><text x="81.6833%" y="463.50"></text></g><g><title>[unknown] (117 samples, 0.03%)</title><rect x="81.4508%" y="437" width="0.0332%" height="15" fill="rgb(205,214,31)" fg:x="287453" fg:w="117"/><text x="81.7008%" y="447.50"></text></g><g><title>[unknown] (66 samples, 0.02%)</title><rect x="81.4653%" y="421" width="0.0187%" height="15" fill="rgb(224,111,15)" fg:x="287504" fg:w="66"/><text x="81.7153%" y="431.50"></text></g><g><title>crossbeam_utils::backoff::Backoff::snooze (1,052 samples, 0.30%)</title><rect x="81.1907%" y="613" width="0.2981%" height="15" fill="rgb(253,21,26)" fg:x="286535" fg:w="1052"/><text x="81.4407%" y="623.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (670 samples, 0.19%)</title><rect x="81.4894%" y="597" width="0.1898%" height="15" fill="rgb(245,139,43)" fg:x="287589" fg:w="670"/><text x="81.7394%" y="607.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (670 samples, 0.19%)</title><rect x="81.4894%" y="581" width="0.1898%" height="15" fill="rgb(252,170,7)" fg:x="287589" fg:w="670"/><text x="81.7394%" y="591.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (660 samples, 0.19%)</title><rect x="81.4922%" y="565" width="0.1870%" height="15" fill="rgb(231,118,14)" fg:x="287599" fg:w="660"/><text x="81.7422%" y="575.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::start_recv (24,684 samples, 6.99%)</title><rect x="75.1646%" y="629" width="6.9943%" height="15" fill="rgb(238,83,0)" fg:x="265268" fg:w="24684"/><text x="75.4146%" y="639.50">crossbeam..</text></g><g><title>crossbeam_utils::backoff::Backoff::spin (2,365 samples, 0.67%)</title><rect x="81.4888%" y="613" width="0.6701%" height="15" fill="rgb(221,39,39)" fg:x="287587" fg:w="2365"/><text x="81.7388%" y="623.50"></text></g><g><title>core::sync::atomic::spin_loop_hint (1,693 samples, 0.48%)</title><rect x="81.6792%" y="597" width="0.4797%" height="15" fill="rgb(222,119,46)" fg:x="288259" fg:w="1693"/><text x="81.9292%" y="607.50"></text></g><g><title>core::hint::spin_loop (1,693 samples, 0.48%)</title><rect x="81.6792%" y="581" width="0.4797%" height="15" fill="rgb(222,165,49)" fg:x="288259" fg:w="1693"/><text x="81.9292%" y="591.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (1,693 samples, 0.48%)</title><rect x="81.6792%" y="565" width="0.4797%" height="15" fill="rgb(219,113,52)" fg:x="288259" fg:w="1693"/><text x="81.9292%" y="575.50"></text></g><g><title>crossbeam_utils::backoff::Backoff::new (713 samples, 0.20%)</title><rect x="82.1589%" y="629" width="0.2020%" height="15" fill="rgb(214,7,15)" fg:x="289952" fg:w="713"/><text x="82.4089%" y="639.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::new (713 samples, 0.20%)</title><rect x="82.1589%" y="613" width="0.2020%" height="15" fill="rgb(235,32,4)" fg:x="289952" fg:w="713"/><text x="82.4089%" y="623.50"></text></g><g><title>core::cell::UnsafeCell&lt;T&gt;::new (713 samples, 0.20%)</title><rect x="82.1589%" y="597" width="0.2020%" height="15" fill="rgb(238,90,54)" fg:x="289952" fg:w="713"/><text x="82.4089%" y="607.50"></text></g><g><title>crossbeam_channel::channel::Receiver&lt;T&gt;::recv (68,095 samples, 19.29%)</title><rect x="63.0677%" y="661" width="19.2950%" height="15" fill="rgb(213,208,19)" fg:x="222576" fg:w="68095"/><text x="63.3177%" y="671.50">crossbeam_channel::channel::Re..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv (56,511 samples, 16.01%)</title><rect x="66.3501%" y="645" width="16.0126%" height="15" fill="rgb(233,156,4)" fg:x="234160" fg:w="56511"/><text x="66.6001%" y="655.50">crossbeam_channel::flavor..</text></g><g><title>&lt;crossbeam_channel::counter::Sender&lt;C&gt; as core::ops::deref::Deref&gt;::deref (183 samples, 0.05%)</title><rect x="84.6057%" y="645" width="0.0519%" height="15" fill="rgb(207,194,5)" fg:x="298587" fg:w="183"/><text x="84.8557%" y="655.50"></text></g><g><title>crossbeam_channel::counter::Sender&lt;C&gt;::counter (183 samples, 0.05%)</title><rect x="84.6057%" y="629" width="0.0519%" height="15" fill="rgb(206,111,30)" fg:x="298587" fg:w="183"/><text x="84.8557%" y="639.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (514 samples, 0.15%)</title><rect x="84.6663%" y="645" width="0.1456%" height="15" fill="rgb(243,70,54)" fg:x="298801" fg:w="514"/><text x="84.9163%" y="655.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (190 samples, 0.05%)</title><rect x="85.2605%" y="629" width="0.0538%" height="15" fill="rgb(242,28,8)" fg:x="300898" fg:w="190"/><text x="85.5105%" y="639.50"></text></g><g><title>[unknown] (74 samples, 0.02%)</title><rect x="86.8592%" y="613" width="0.0210%" height="15" fill="rgb(219,106,18)" fg:x="306540" fg:w="74"/><text x="87.1092%" y="623.50"></text></g><g><title>[unknown] (70 samples, 0.02%)</title><rect x="86.8603%" y="597" width="0.0198%" height="15" fill="rgb(244,222,10)" fg:x="306544" fg:w="70"/><text x="87.1103%" y="607.50"></text></g><g><title>[unknown] (69 samples, 0.02%)</title><rect x="86.8606%" y="581" width="0.0196%" height="15" fill="rgb(236,179,52)" fg:x="306545" fg:w="69"/><text x="87.1106%" y="591.50"></text></g><g><title>[unknown] (66 samples, 0.02%)</title><rect x="86.8615%" y="565" width="0.0187%" height="15" fill="rgb(213,23,39)" fg:x="306548" fg:w="66"/><text x="87.1115%" y="575.50"></text></g><g><title>[unknown] (64 samples, 0.02%)</title><rect x="86.8620%" y="549" width="0.0181%" height="15" fill="rgb(238,48,10)" fg:x="306550" fg:w="64"/><text x="87.1120%" y="559.50"></text></g><g><title>[unknown] (60 samples, 0.02%)</title><rect x="86.8632%" y="533" width="0.0170%" height="15" fill="rgb(251,196,23)" fg:x="306554" fg:w="60"/><text x="87.1132%" y="543.50"></text></g><g><title>[unknown] (56 samples, 0.02%)</title><rect x="86.8643%" y="517" width="0.0159%" height="15" fill="rgb(250,152,24)" fg:x="306558" fg:w="56"/><text x="87.1143%" y="527.50"></text></g><g><title>[unknown] (51 samples, 0.01%)</title><rect x="86.8657%" y="501" width="0.0145%" height="15" fill="rgb(209,150,17)" fg:x="306563" fg:w="51"/><text x="87.1157%" y="511.50"></text></g><g><title>[unknown] (44 samples, 0.01%)</title><rect x="86.8677%" y="485" width="0.0125%" height="15" fill="rgb(234,202,34)" fg:x="306570" fg:w="44"/><text x="87.1177%" y="495.50"></text></g><g><title>[unknown] (38 samples, 0.01%)</title><rect x="86.8694%" y="469" width="0.0108%" height="15" fill="rgb(253,148,53)" fg:x="306576" fg:w="38"/><text x="87.1194%" y="479.50"></text></g><g><title>[unknown] (36 samples, 0.01%)</title><rect x="86.8700%" y="453" width="0.0102%" height="15" fill="rgb(218,129,16)" fg:x="306578" fg:w="36"/><text x="87.1200%" y="463.50"></text></g><g><title>__memset_avx2_unaligned_erms (1,653 samples, 0.47%)</title><rect x="86.8977%" y="597" width="0.4684%" height="15" fill="rgb(216,85,19)" fg:x="306676" fg:w="1653"/><text x="87.1477%" y="607.50"></text></g><g><title>__GI___libc_malloc (3,851 samples, 1.09%)</title><rect x="87.3706%" y="533" width="1.0912%" height="15" fill="rgb(235,228,7)" fg:x="308345" fg:w="3851"/><text x="87.6206%" y="543.50"></text></g><g><title>_int_malloc (2,470 samples, 0.70%)</title><rect x="87.7620%" y="517" width="0.6999%" height="15" fill="rgb(245,175,0)" fg:x="309726" fg:w="2470"/><text x="88.0120%" y="527.50"></text></g><g><title>unlink_chunk.isra.0 (167 samples, 0.05%)</title><rect x="88.4145%" y="501" width="0.0473%" height="15" fill="rgb(208,168,36)" fg:x="312029" fg:w="167"/><text x="88.6645%" y="511.50"></text></g><g><title>__rdl_alloc (142 samples, 0.04%)</title><rect x="88.4618%" y="533" width="0.0402%" height="15" fill="rgb(246,171,24)" fg:x="312196" fg:w="142"/><text x="88.7118%" y="543.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (105 samples, 0.03%)</title><rect x="88.4723%" y="517" width="0.0298%" height="15" fill="rgb(215,142,24)" fg:x="312233" fg:w="105"/><text x="88.7223%" y="527.50"></text></g><g><title>__rust_alloc (93 samples, 0.03%)</title><rect x="88.5021%" y="533" width="0.0264%" height="15" fill="rgb(250,187,7)" fg:x="312338" fg:w="93"/><text x="88.7521%" y="543.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (5,841 samples, 1.66%)</title><rect x="86.8802%" y="613" width="1.6551%" height="15" fill="rgb(228,66,33)" fg:x="306614" fg:w="5841"/><text x="87.1302%" y="623.50"></text></g><g><title>alloc::alloc::exchange_malloc (4,126 samples, 1.17%)</title><rect x="87.3661%" y="597" width="1.1691%" height="15" fill="rgb(234,215,21)" fg:x="308329" fg:w="4126"/><text x="87.6161%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4,126 samples, 1.17%)</title><rect x="87.3661%" y="581" width="1.1691%" height="15" fill="rgb(222,191,20)" fg:x="308329" fg:w="4126"/><text x="87.6161%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4,126 samples, 1.17%)</title><rect x="87.3661%" y="565" width="1.1691%" height="15" fill="rgb(245,79,54)" fg:x="308329" fg:w="4126"/><text x="87.6161%" y="575.50"></text></g><g><title>alloc::alloc::alloc (4,126 samples, 1.17%)</title><rect x="87.3661%" y="549" width="1.1691%" height="15" fill="rgb(240,10,37)" fg:x="308329" fg:w="4126"/><text x="87.6161%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;crossbeam_channel::flavors::list::Block&lt;lab4::Event&gt;&gt;&gt;&gt; (363 samples, 0.10%)</title><rect x="88.5392%" y="613" width="0.1029%" height="15" fill="rgb(214,192,32)" fg:x="312469" fg:w="363"/><text x="88.7892%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (333 samples, 0.09%)</title><rect x="88.6421%" y="613" width="0.0944%" height="15" fill="rgb(209,36,54)" fg:x="312832" fg:w="333"/><text x="88.8921%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_load (333 samples, 0.09%)</title><rect x="88.6421%" y="597" width="0.0944%" height="15" fill="rgb(220,10,11)" fg:x="312832" fg:w="333"/><text x="88.8921%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::store (120 samples, 0.03%)</title><rect x="88.7364%" y="613" width="0.0340%" height="15" fill="rgb(221,106,17)" fg:x="313165" fg:w="120"/><text x="88.9864%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_store (120 samples, 0.03%)</title><rect x="88.7364%" y="597" width="0.0340%" height="15" fill="rgb(251,142,44)" fg:x="313165" fg:w="120"/><text x="88.9864%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (9,279 samples, 2.63%)</title><rect x="88.7704%" y="613" width="2.6292%" height="15" fill="rgb(238,13,15)" fg:x="313285" fg:w="9279"/><text x="89.0204%" y="623.50">co..</text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (9,279 samples, 2.63%)</title><rect x="88.7704%" y="597" width="2.6292%" height="15" fill="rgb(208,107,27)" fg:x="313285" fg:w="9279"/><text x="89.0204%" y="607.50">co..</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (321 samples, 0.09%)</title><rect x="91.3997%" y="613" width="0.0910%" height="15" fill="rgb(205,136,37)" fg:x="322564" fg:w="321"/><text x="91.6497%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_add (321 samples, 0.09%)</title><rect x="91.3997%" y="597" width="0.0910%" height="15" fill="rgb(250,205,27)" fg:x="322564" fg:w="321"/><text x="91.6497%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (101 samples, 0.03%)</title><rect x="91.4906%" y="613" width="0.0286%" height="15" fill="rgb(210,80,43)" fg:x="322885" fg:w="101"/><text x="91.7406%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_load (101 samples, 0.03%)</title><rect x="91.4906%" y="597" width="0.0286%" height="15" fill="rgb(247,160,36)" fg:x="322885" fg:w="101"/><text x="91.7406%" y="607.50"></text></g><g><title>__GI___sched_yield (553 samples, 0.16%)</title><rect x="91.5195%" y="597" width="0.1567%" height="15" fill="rgb(234,13,49)" fg:x="322987" fg:w="553"/><text x="91.7695%" y="607.50"></text></g><g><title>[unknown] (540 samples, 0.15%)</title><rect x="91.5232%" y="581" width="0.1530%" height="15" fill="rgb(234,122,0)" fg:x="323000" fg:w="540"/><text x="91.7732%" y="591.50"></text></g><g><title>[unknown] (365 samples, 0.10%)</title><rect x="91.5728%" y="565" width="0.1034%" height="15" fill="rgb(207,146,38)" fg:x="323175" fg:w="365"/><text x="91.8228%" y="575.50"></text></g><g><title>[unknown] (352 samples, 0.10%)</title><rect x="91.5765%" y="549" width="0.0997%" height="15" fill="rgb(207,177,25)" fg:x="323188" fg:w="352"/><text x="91.8265%" y="559.50"></text></g><g><title>[unknown] (297 samples, 0.08%)</title><rect x="91.5921%" y="533" width="0.0842%" height="15" fill="rgb(211,178,42)" fg:x="323243" fg:w="297"/><text x="91.8421%" y="543.50"></text></g><g><title>[unknown] (284 samples, 0.08%)</title><rect x="91.5957%" y="517" width="0.0805%" height="15" fill="rgb(230,69,54)" fg:x="323256" fg:w="284"/><text x="91.8457%" y="527.50"></text></g><g><title>[unknown] (269 samples, 0.08%)</title><rect x="91.6000%" y="501" width="0.0762%" height="15" fill="rgb(214,135,41)" fg:x="323271" fg:w="269"/><text x="91.8500%" y="511.50"></text></g><g><title>[unknown] (213 samples, 0.06%)</title><rect x="91.6159%" y="485" width="0.0604%" height="15" fill="rgb(237,67,25)" fg:x="323327" fg:w="213"/><text x="91.8659%" y="495.50"></text></g><g><title>[unknown] (157 samples, 0.04%)</title><rect x="91.6317%" y="469" width="0.0445%" height="15" fill="rgb(222,189,50)" fg:x="323383" fg:w="157"/><text x="91.8817%" y="479.50"></text></g><g><title>[unknown] (124 samples, 0.04%)</title><rect x="91.6411%" y="453" width="0.0351%" height="15" fill="rgb(245,148,34)" fg:x="323416" fg:w="124"/><text x="91.8911%" y="463.50"></text></g><g><title>[unknown] (86 samples, 0.02%)</title><rect x="91.6518%" y="437" width="0.0244%" height="15" fill="rgb(222,29,6)" fg:x="323454" fg:w="86"/><text x="91.9018%" y="447.50"></text></g><g><title>[unknown] (46 samples, 0.01%)</title><rect x="91.6632%" y="421" width="0.0130%" height="15" fill="rgb(221,189,43)" fg:x="323494" fg:w="46"/><text x="91.9132%" y="431.50"></text></g><g><title>crossbeam_utils::backoff::Backoff::snooze (561 samples, 0.16%)</title><rect x="91.5192%" y="613" width="0.1590%" height="15" fill="rgb(207,36,27)" fg:x="322986" fg:w="561"/><text x="91.7692%" y="623.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1,479 samples, 0.42%)</title><rect x="91.6782%" y="597" width="0.4191%" height="15" fill="rgb(217,90,24)" fg:x="323547" fg:w="1479"/><text x="91.9282%" y="607.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1,479 samples, 0.42%)</title><rect x="91.6782%" y="581" width="0.4191%" height="15" fill="rgb(224,66,35)" fg:x="323547" fg:w="1479"/><text x="91.9282%" y="591.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (1,438 samples, 0.41%)</title><rect x="91.6898%" y="565" width="0.4075%" height="15" fill="rgb(221,13,50)" fg:x="323588" fg:w="1438"/><text x="91.9398%" y="575.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::start_send (28,199 samples, 7.99%)</title><rect x="85.3144%" y="629" width="7.9903%" height="15" fill="rgb(236,68,49)" fg:x="301088" fg:w="28199"/><text x="85.5644%" y="639.50">crossbeam_c..</text></g><g><title>crossbeam_utils::backoff::Backoff::spin (5,740 samples, 1.63%)</title><rect x="91.6782%" y="613" width="1.6264%" height="15" fill="rgb(229,146,28)" fg:x="323547" fg:w="5740"/><text x="91.9282%" y="623.50"></text></g><g><title>core::sync::atomic::spin_loop_hint (4,261 samples, 1.21%)</title><rect x="92.0973%" y="597" width="1.2074%" height="15" fill="rgb(225,31,38)" fg:x="325026" fg:w="4261"/><text x="92.3473%" y="607.50"></text></g><g><title>core::hint::spin_loop (4,261 samples, 1.21%)</title><rect x="92.0973%" y="581" width="1.2074%" height="15" fill="rgb(250,208,3)" fg:x="325026" fg:w="4261"/><text x="92.3473%" y="591.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (4,261 samples, 1.21%)</title><rect x="92.0973%" y="565" width="1.2074%" height="15" fill="rgb(246,54,23)" fg:x="325026" fg:w="4261"/><text x="92.3473%" y="575.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (995 samples, 0.28%)</title><rect x="93.3061%" y="613" width="0.2819%" height="15" fill="rgb(243,76,11)" fg:x="329292" fg:w="995"/><text x="93.5561%" y="623.50"></text></g><g><title>core::ptr::write (995 samples, 0.28%)</title><rect x="93.3061%" y="597" width="0.2819%" height="15" fill="rgb(245,21,50)" fg:x="329292" fg:w="995"/><text x="93.5561%" y="607.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (488 samples, 0.14%)</title><rect x="93.5880%" y="613" width="0.1383%" height="15" fill="rgb(228,9,43)" fg:x="330287" fg:w="488"/><text x="93.8380%" y="623.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (488 samples, 0.14%)</title><rect x="93.5880%" y="597" width="0.1383%" height="15" fill="rgb(208,100,47)" fg:x="330287" fg:w="488"/><text x="93.8380%" y="607.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (488 samples, 0.14%)</title><rect x="93.5880%" y="581" width="0.1383%" height="15" fill="rgb(232,26,8)" fg:x="330287" fg:w="488"/><text x="93.8380%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (9,144 samples, 2.59%)</title><rect x="93.7263%" y="613" width="2.5910%" height="15" fill="rgb(216,166,38)" fg:x="330775" fg:w="9144"/><text x="93.9763%" y="623.50">co..</text></g><g><title>core::sync::atomic::atomic_or (9,144 samples, 2.59%)</title><rect x="93.7263%" y="597" width="2.5910%" height="15" fill="rgb(251,202,51)" fg:x="330775" fg:w="9144"/><text x="93.9763%" y="607.50">co..</text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (52,183 samples, 14.79%)</title><rect x="82.3627%" y="661" width="14.7862%" height="15" fill="rgb(254,216,34)" fg:x="290671" fg:w="52183"/><text x="82.6127%" y="671.50">crossbeam_channel::chan..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (43,539 samples, 12.34%)</title><rect x="84.8120%" y="645" width="12.3369%" height="15" fill="rgb(251,32,27)" fg:x="299315" fg:w="43539"/><text x="85.0620%" y="655.50">crossbeam_channel:..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::write (13,567 samples, 3.84%)</title><rect x="93.3046%" y="629" width="3.8443%" height="15" fill="rgb(208,127,28)" fg:x="329287" fg:w="13567"/><text x="93.5546%" y="639.50">cros..</text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (2,935 samples, 0.83%)</title><rect x="96.3173%" y="613" width="0.8316%" height="15" fill="rgb(224,137,22)" fg:x="339919" fg:w="2935"/><text x="96.5673%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (2,902 samples, 0.82%)</title><rect x="96.3266%" y="597" width="0.8223%" height="15" fill="rgb(254,70,32)" fg:x="339952" fg:w="2902"/><text x="96.5766%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_load (2,902 samples, 0.82%)</title><rect x="96.3266%" y="581" width="0.8223%" height="15" fill="rgb(229,75,37)" fg:x="339952" fg:w="2902"/><text x="96.5766%" y="591.50"></text></g><g><title>[unknown] (56 samples, 0.02%)</title><rect x="97.1330%" y="565" width="0.0159%" height="15" fill="rgb(252,64,23)" fg:x="342798" fg:w="56"/><text x="97.3830%" y="575.50"></text></g><g><title>[unknown] (52 samples, 0.01%)</title><rect x="97.1342%" y="549" width="0.0147%" height="15" fill="rgb(232,162,48)" fg:x="342802" fg:w="52"/><text x="97.3842%" y="559.50"></text></g><g><title>[unknown] (50 samples, 0.01%)</title><rect x="97.1347%" y="533" width="0.0142%" height="15" fill="rgb(246,160,12)" fg:x="342804" fg:w="50"/><text x="97.3847%" y="543.50"></text></g><g><title>[unknown] (49 samples, 0.01%)</title><rect x="97.1350%" y="517" width="0.0139%" height="15" fill="rgb(247,166,0)" fg:x="342805" fg:w="49"/><text x="97.3850%" y="527.50"></text></g><g><title>[unknown] (45 samples, 0.01%)</title><rect x="97.1361%" y="501" width="0.0128%" height="15" fill="rgb(249,219,21)" fg:x="342809" fg:w="45"/><text x="97.3861%" y="511.50"></text></g><g><title>[unknown] (42 samples, 0.01%)</title><rect x="97.1370%" y="485" width="0.0119%" height="15" fill="rgb(205,209,3)" fg:x="342812" fg:w="42"/><text x="97.3870%" y="495.50"></text></g><g><title>[unknown] (37 samples, 0.01%)</title><rect x="97.1384%" y="469" width="0.0105%" height="15" fill="rgb(243,44,1)" fg:x="342817" fg:w="37"/><text x="97.3884%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::{{closure}} (86 samples, 0.02%)</title><rect x="97.1608%" y="341" width="0.0244%" height="15" fill="rgb(206,159,16)" fg:x="342896" fg:w="86"/><text x="97.4108%" y="351.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::{{closure}} (78 samples, 0.02%)</title><rect x="97.1631%" y="325" width="0.0221%" height="15" fill="rgb(244,77,30)" fg:x="342904" fg:w="78"/><text x="97.4131%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as hex::FromHex&gt;::from_hex::{{closure}} (78 samples, 0.02%)</title><rect x="97.1631%" y="309" width="0.0221%" height="15" fill="rgb(218,69,12)" fg:x="342904" fg:w="78"/><text x="97.4131%" y="319.50"></text></g><g><title>hex::val (65 samples, 0.02%)</title><rect x="97.1667%" y="293" width="0.0184%" height="15" fill="rgb(212,87,7)" fg:x="342917" fg:w="65"/><text x="97.4167%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (112 samples, 0.03%)</title><rect x="97.1602%" y="437" width="0.0317%" height="15" fill="rgb(245,114,25)" fg:x="342894" fg:w="112"/><text x="97.4102%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (111 samples, 0.03%)</title><rect x="97.1605%" y="421" width="0.0315%" height="15" fill="rgb(210,61,42)" fg:x="342895" fg:w="111"/><text x="97.4105%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (111 samples, 0.03%)</title><rect x="97.1605%" y="405" width="0.0315%" height="15" fill="rgb(211,52,33)" fg:x="342895" fg:w="111"/><text x="97.4105%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (110 samples, 0.03%)</title><rect x="97.1608%" y="389" width="0.0312%" height="15" fill="rgb(234,58,33)" fg:x="342896" fg:w="110"/><text x="97.4108%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (110 samples, 0.03%)</title><rect x="97.1608%" y="373" width="0.0312%" height="15" fill="rgb(220,115,36)" fg:x="342896" fg:w="110"/><text x="97.4108%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (110 samples, 0.03%)</title><rect x="97.1608%" y="357" width="0.0312%" height="15" fill="rgb(243,153,54)" fg:x="342896" fg:w="110"/><text x="97.4108%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (160 samples, 0.05%)</title><rect x="97.1574%" y="469" width="0.0453%" height="15" fill="rgb(251,47,18)" fg:x="342884" fg:w="160"/><text x="97.4074%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (160 samples, 0.05%)</title><rect x="97.1574%" y="453" width="0.0453%" height="15" fill="rgb(242,102,42)" fg:x="342884" fg:w="160"/><text x="97.4074%" y="463.50"></text></g><g><title>hex::decode (167 samples, 0.05%)</title><rect x="97.1568%" y="629" width="0.0473%" height="15" fill="rgb(234,31,38)" fg:x="342882" fg:w="167"/><text x="97.4068%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as hex::FromHex&gt;::from_hex (167 samples, 0.05%)</title><rect x="97.1568%" y="613" width="0.0473%" height="15" fill="rgb(221,117,51)" fg:x="342882" fg:w="167"/><text x="97.4068%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (167 samples, 0.05%)</title><rect x="97.1568%" y="597" width="0.0473%" height="15" fill="rgb(212,20,18)" fg:x="342882" fg:w="167"/><text x="97.4068%" y="607.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (167 samples, 0.05%)</title><rect x="97.1568%" y="581" width="0.0473%" height="15" fill="rgb(245,133,36)" fg:x="342882" fg:w="167"/><text x="97.4068%" y="591.50"></text></g><g><title>core::iter::adapters::try_process (167 samples, 0.05%)</title><rect x="97.1568%" y="565" width="0.0473%" height="15" fill="rgb(212,6,19)" fg:x="342882" fg:w="167"/><text x="97.4068%" y="575.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::{{closure}} (166 samples, 0.05%)</title><rect x="97.1571%" y="549" width="0.0470%" height="15" fill="rgb(218,1,36)" fg:x="342883" fg:w="166"/><text x="97.4071%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (166 samples, 0.05%)</title><rect x="97.1571%" y="533" width="0.0470%" height="15" fill="rgb(246,84,54)" fg:x="342883" fg:w="166"/><text x="97.4071%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (166 samples, 0.05%)</title><rect x="97.1571%" y="517" width="0.0470%" height="15" fill="rgb(242,110,6)" fg:x="342883" fg:w="166"/><text x="97.4071%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (166 samples, 0.05%)</title><rect x="97.1571%" y="501" width="0.0470%" height="15" fill="rgb(214,47,5)" fg:x="342883" fg:w="166"/><text x="97.4071%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (166 samples, 0.05%)</title><rect x="97.1571%" y="485" width="0.0470%" height="15" fill="rgb(218,159,25)" fg:x="342883" fg:w="166"/><text x="97.4071%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (44 samples, 0.01%)</title><rect x="97.2042%" y="581" width="0.0125%" height="15" fill="rgb(215,211,28)" fg:x="343049" fg:w="44"/><text x="97.4542%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (44 samples, 0.01%)</title><rect x="97.2042%" y="565" width="0.0125%" height="15" fill="rgb(238,59,32)" fg:x="343049" fg:w="44"/><text x="97.4542%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (44 samples, 0.01%)</title><rect x="97.2042%" y="549" width="0.0125%" height="15" fill="rgb(226,82,3)" fg:x="343049" fg:w="44"/><text x="97.4542%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (42 samples, 0.01%)</title><rect x="97.2047%" y="533" width="0.0119%" height="15" fill="rgb(240,164,32)" fg:x="343051" fg:w="42"/><text x="97.4547%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (42 samples, 0.01%)</title><rect x="97.2047%" y="517" width="0.0119%" height="15" fill="rgb(232,46,7)" fg:x="343051" fg:w="42"/><text x="97.4547%" y="527.50"></text></g><g><title>&lt;T as hex::ToHex&gt;::encode_hex (45 samples, 0.01%)</title><rect x="97.2042%" y="613" width="0.0128%" height="15" fill="rgb(229,129,53)" fg:x="343049" fg:w="45"/><text x="97.4542%" y="623.50"></text></g><g><title>hex::encode_to_iter (45 samples, 0.01%)</title><rect x="97.2042%" y="597" width="0.0128%" height="15" fill="rgb(234,188,29)" fg:x="343049" fg:w="45"/><text x="97.4542%" y="607.50"></text></g><g><title>lab4::checksum::Checksum::update (229 samples, 0.06%)</title><rect x="97.1523%" y="645" width="0.0649%" height="15" fill="rgb(246,141,4)" fg:x="342866" fg:w="229"/><text x="97.4023%" y="655.50"></text></g><g><title>hex::encode (46 samples, 0.01%)</title><rect x="97.2042%" y="629" width="0.0130%" height="15" fill="rgb(229,23,39)" fg:x="343049" fg:w="46"/><text x="97.4542%" y="639.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::digest (64 samples, 0.02%)</title><rect x="97.2172%" y="629" width="0.0181%" height="15" fill="rgb(206,12,3)" fg:x="343095" fg:w="64"/><text x="97.4672%" y="639.50"></text></g><g><title>digest::fixed::FixedOutput::finalize_fixed (57 samples, 0.02%)</title><rect x="97.2192%" y="613" width="0.0162%" height="15" fill="rgb(252,226,20)" fg:x="343102" fg:w="57"/><text x="97.4692%" y="623.50"></text></g><g><title>&lt;D as digest::fixed::FixedOutput&gt;::finalize_into (57 samples, 0.02%)</title><rect x="97.2192%" y="597" width="0.0162%" height="15" fill="rgb(216,123,35)" fg:x="343102" fg:w="57"/><text x="97.4692%" y="607.50"></text></g><g><title>&lt;sha2::sha256::Sha256 as digest::fixed::FixedOutputDirty&gt;::finalize_into_dirty (57 samples, 0.02%)</title><rect x="97.2192%" y="581" width="0.0162%" height="15" fill="rgb(212,68,40)" fg:x="343102" fg:w="57"/><text x="97.4692%" y="591.50"></text></g><g><title>sha2::sha256::Engine256::finish (57 samples, 0.02%)</title><rect x="97.2192%" y="565" width="0.0162%" height="15" fill="rgb(254,125,32)" fg:x="343102" fg:w="57"/><text x="97.4692%" y="575.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize&gt;::len64_padding_be (57 samples, 0.02%)</title><rect x="97.2192%" y="549" width="0.0162%" height="15" fill="rgb(253,97,22)" fg:x="343102" fg:w="57"/><text x="97.4692%" y="559.50"></text></g><g><title>sha2::sha256::Engine256::finish::{{closure}} (57 samples, 0.02%)</title><rect x="97.2192%" y="533" width="0.0162%" height="15" fill="rgb(241,101,14)" fg:x="343102" fg:w="57"/><text x="97.4692%" y="543.50"></text></g><g><title>sha2::sha256::compress256 (57 samples, 0.02%)</title><rect x="97.2192%" y="517" width="0.0162%" height="15" fill="rgb(238,103,29)" fg:x="343102" fg:w="57"/><text x="97.4692%" y="527.50"></text></g><g><title>sha2::sha256::x86::compress (57 samples, 0.02%)</title><rect x="97.2192%" y="501" width="0.0162%" height="15" fill="rgb(233,195,47)" fg:x="343102" fg:w="57"/><text x="97.4692%" y="511.50"></text></g><g><title>sha2::sha256::soft::compress (56 samples, 0.02%)</title><rect x="97.2195%" y="485" width="0.0159%" height="15" fill="rgb(246,218,30)" fg:x="343103" fg:w="56"/><text x="97.4695%" y="495.50"></text></g><g><title>sha2::sha256::soft::sha256_digest_block_u32 (56 samples, 0.02%)</title><rect x="97.2195%" y="469" width="0.0159%" height="15" fill="rgb(219,145,47)" fg:x="343103" fg:w="56"/><text x="97.4695%" y="479.50"></text></g><g><title>sha2::sha256::soft::sha256_digest_round_x2 (37 samples, 0.01%)</title><rect x="97.2248%" y="453" width="0.0105%" height="15" fill="rgb(243,12,26)" fg:x="343122" fg:w="37"/><text x="97.4748%" y="463.50"></text></g><g><title>lab4::checksum::Checksum::with_sha256 (111 samples, 0.03%)</title><rect x="97.2172%" y="645" width="0.0315%" height="15" fill="rgb(214,87,16)" fg:x="343095" fg:w="111"/><text x="97.4672%" y="655.50"></text></g><g><title>hex::encode (47 samples, 0.01%)</title><rect x="97.2353%" y="629" width="0.0133%" height="15" fill="rgb(208,99,42)" fg:x="343159" fg:w="47"/><text x="97.4853%" y="639.50"></text></g><g><title>&lt;T as hex::ToHex&gt;::encode_hex (47 samples, 0.01%)</title><rect x="97.2353%" y="613" width="0.0133%" height="15" fill="rgb(253,99,2)" fg:x="343159" fg:w="47"/><text x="97.4853%" y="623.50"></text></g><g><title>hex::encode_to_iter (47 samples, 0.01%)</title><rect x="97.2353%" y="597" width="0.0133%" height="15" fill="rgb(220,168,23)" fg:x="343159" fg:w="47"/><text x="97.4853%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (47 samples, 0.01%)</title><rect x="97.2353%" y="581" width="0.0133%" height="15" fill="rgb(242,38,24)" fg:x="343159" fg:w="47"/><text x="97.4853%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (47 samples, 0.01%)</title><rect x="97.2353%" y="565" width="0.0133%" height="15" fill="rgb(225,182,9)" fg:x="343159" fg:w="47"/><text x="97.4853%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (47 samples, 0.01%)</title><rect x="97.2353%" y="549" width="0.0133%" height="15" fill="rgb(243,178,37)" fg:x="343159" fg:w="47"/><text x="97.4853%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (43 samples, 0.01%)</title><rect x="97.2365%" y="533" width="0.0122%" height="15" fill="rgb(232,139,19)" fg:x="343163" fg:w="43"/><text x="97.4865%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (43 samples, 0.01%)</title><rect x="97.2365%" y="517" width="0.0122%" height="15" fill="rgb(225,201,24)" fg:x="343163" fg:w="43"/><text x="97.4865%" y="527.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (358 samples, 0.10%)</title><rect x="97.2518%" y="549" width="0.1014%" height="15" fill="rgb(221,47,46)" fg:x="343217" fg:w="358"/><text x="97.5018%" y="559.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (356 samples, 0.10%)</title><rect x="97.2523%" y="533" width="0.1009%" height="15" fill="rgb(249,23,13)" fg:x="343219" fg:w="356"/><text x="97.5023%" y="543.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (356 samples, 0.10%)</title><rect x="97.2523%" y="517" width="0.1009%" height="15" fill="rgb(219,9,5)" fg:x="343219" fg:w="356"/><text x="97.5023%" y="527.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (356 samples, 0.10%)</title><rect x="97.2523%" y="501" width="0.1009%" height="15" fill="rgb(254,171,16)" fg:x="343219" fg:w="356"/><text x="97.5023%" y="511.50"></text></g><g><title>__libc_write (355 samples, 0.10%)</title><rect x="97.2526%" y="485" width="0.1006%" height="15" fill="rgb(230,171,20)" fg:x="343220" fg:w="355"/><text x="97.5026%" y="495.50"></text></g><g><title>__libc_write (353 samples, 0.10%)</title><rect x="97.2532%" y="469" width="0.1000%" height="15" fill="rgb(210,71,41)" fg:x="343222" fg:w="353"/><text x="97.5032%" y="479.50"></text></g><g><title>[unknown] (350 samples, 0.10%)</title><rect x="97.2540%" y="453" width="0.0992%" height="15" fill="rgb(206,173,20)" fg:x="343225" fg:w="350"/><text x="97.5040%" y="463.50"></text></g><g><title>[unknown] (316 samples, 0.09%)</title><rect x="97.2637%" y="437" width="0.0895%" height="15" fill="rgb(233,88,34)" fg:x="343259" fg:w="316"/><text x="97.5137%" y="447.50"></text></g><g><title>[unknown] (310 samples, 0.09%)</title><rect x="97.2654%" y="421" width="0.0878%" height="15" fill="rgb(223,209,46)" fg:x="343265" fg:w="310"/><text x="97.5154%" y="431.50"></text></g><g><title>[unknown] (285 samples, 0.08%)</title><rect x="97.2724%" y="405" width="0.0808%" height="15" fill="rgb(250,43,18)" fg:x="343290" fg:w="285"/><text x="97.5224%" y="415.50"></text></g><g><title>[unknown] (280 samples, 0.08%)</title><rect x="97.2739%" y="389" width="0.0793%" height="15" fill="rgb(208,13,10)" fg:x="343295" fg:w="280"/><text x="97.5239%" y="399.50"></text></g><g><title>[unknown] (274 samples, 0.08%)</title><rect x="97.2756%" y="373" width="0.0776%" height="15" fill="rgb(212,200,36)" fg:x="343301" fg:w="274"/><text x="97.5256%" y="383.50"></text></g><g><title>[unknown] (266 samples, 0.08%)</title><rect x="97.2778%" y="357" width="0.0754%" height="15" fill="rgb(225,90,30)" fg:x="343309" fg:w="266"/><text x="97.5278%" y="367.50"></text></g><g><title>[unknown] (262 samples, 0.07%)</title><rect x="97.2790%" y="341" width="0.0742%" height="15" fill="rgb(236,182,39)" fg:x="343313" fg:w="262"/><text x="97.5290%" y="351.50"></text></g><g><title>[unknown] (245 samples, 0.07%)</title><rect x="97.2838%" y="325" width="0.0694%" height="15" fill="rgb(212,144,35)" fg:x="343330" fg:w="245"/><text x="97.5338%" y="335.50"></text></g><g><title>[unknown] (209 samples, 0.06%)</title><rect x="97.2940%" y="309" width="0.0592%" height="15" fill="rgb(228,63,44)" fg:x="343366" fg:w="209"/><text x="97.5440%" y="319.50"></text></g><g><title>[unknown] (186 samples, 0.05%)</title><rect x="97.3005%" y="293" width="0.0527%" height="15" fill="rgb(228,109,6)" fg:x="343389" fg:w="186"/><text x="97.5505%" y="303.50"></text></g><g><title>[unknown] (171 samples, 0.05%)</title><rect x="97.3047%" y="277" width="0.0485%" height="15" fill="rgb(238,117,24)" fg:x="343404" fg:w="171"/><text x="97.5547%" y="287.50"></text></g><g><title>[unknown] (156 samples, 0.04%)</title><rect x="97.3090%" y="261" width="0.0442%" height="15" fill="rgb(242,26,26)" fg:x="343419" fg:w="156"/><text x="97.5590%" y="271.50"></text></g><g><title>[unknown] (136 samples, 0.04%)</title><rect x="97.3147%" y="245" width="0.0385%" height="15" fill="rgb(221,92,48)" fg:x="343439" fg:w="136"/><text x="97.5647%" y="255.50"></text></g><g><title>[unknown] (132 samples, 0.04%)</title><rect x="97.3158%" y="229" width="0.0374%" height="15" fill="rgb(209,209,32)" fg:x="343443" fg:w="132"/><text x="97.5658%" y="239.50"></text></g><g><title>[unknown] (124 samples, 0.04%)</title><rect x="97.3181%" y="213" width="0.0351%" height="15" fill="rgb(221,70,22)" fg:x="343451" fg:w="124"/><text x="97.5681%" y="223.50"></text></g><g><title>[unknown] (109 samples, 0.03%)</title><rect x="97.3223%" y="197" width="0.0309%" height="15" fill="rgb(248,145,5)" fg:x="343466" fg:w="109"/><text x="97.5723%" y="207.50"></text></g><g><title>[unknown] (81 samples, 0.02%)</title><rect x="97.3302%" y="181" width="0.0230%" height="15" fill="rgb(226,116,26)" fg:x="343494" fg:w="81"/><text x="97.5802%" y="191.50"></text></g><g><title>[unknown] (64 samples, 0.02%)</title><rect x="97.3351%" y="165" width="0.0181%" height="15" fill="rgb(244,5,17)" fg:x="343511" fg:w="64"/><text x="97.5851%" y="175.50"></text></g><g><title>[unknown] (38 samples, 0.01%)</title><rect x="97.3424%" y="149" width="0.0108%" height="15" fill="rgb(252,159,33)" fg:x="343537" fg:w="38"/><text x="97.5924%" y="159.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (368 samples, 0.10%)</title><rect x="97.2501%" y="613" width="0.1043%" height="15" fill="rgb(206,71,0)" fg:x="343211" fg:w="368"/><text x="97.5001%" y="623.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (368 samples, 0.10%)</title><rect x="97.2501%" y="597" width="0.1043%" height="15" fill="rgb(233,118,54)" fg:x="343211" fg:w="368"/><text x="97.5001%" y="607.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (368 samples, 0.10%)</title><rect x="97.2501%" y="581" width="0.1043%" height="15" fill="rgb(234,83,48)" fg:x="343211" fg:w="368"/><text x="97.5001%" y="591.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (368 samples, 0.10%)</title><rect x="97.2501%" y="565" width="0.1043%" height="15" fill="rgb(228,3,54)" fg:x="343211" fg:w="368"/><text x="97.5001%" y="575.50"></text></g><g><title>std::panic::catch_unwind (319,001 samples, 90.39%)</title><rect x="6.9688%" y="789" width="90.3901%" height="15" fill="rgb(226,155,13)" fg:x="24594" fg:w="319001"/><text x="7.2188%" y="799.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (319,001 samples, 90.39%)</title><rect x="6.9688%" y="773" width="90.3901%" height="15" fill="rgb(241,28,37)" fg:x="24594" fg:w="319001"/><text x="7.2188%" y="783.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (319,001 samples, 90.39%)</title><rect x="6.9688%" y="757" width="90.3901%" height="15" fill="rgb(233,93,10)" fg:x="24594" fg:w="319001"/><text x="7.2188%" y="767.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (319,001 samples, 90.39%)</title><rect x="6.9688%" y="741" width="90.3901%" height="15" fill="rgb(225,113,19)" fg:x="24594" fg:w="319001"/><text x="7.2188%" y="751.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (319,001 samples, 90.39%)</title><rect x="6.9688%" y="725" width="90.3901%" height="15" fill="rgb(241,2,18)" fg:x="24594" fg:w="319001"/><text x="7.2188%" y="735.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (319,001 samples, 90.39%)</title><rect x="6.9688%" y="709" width="90.3901%" height="15" fill="rgb(228,207,21)" fg:x="24594" fg:w="319001"/><text x="7.2188%" y="719.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>lab4::hackathon::{{closure}} (319,001 samples, 90.39%)</title><rect x="6.9688%" y="693" width="90.3901%" height="15" fill="rgb(213,211,35)" fg:x="24594" fg:w="319001"/><text x="7.2188%" y="703.50">lab4::hackathon::{{closure}}</text></g><g><title>lab4::student::Student::run (127,713 samples, 36.19%)</title><rect x="61.1709%" y="677" width="36.1879%" height="15" fill="rgb(209,83,10)" fg:x="215882" fg:w="127713"/><text x="61.4209%" y="687.50">lab4::student::Student::run</text></g><g><title>lab4::student::Student::build_idea (741 samples, 0.21%)</title><rect x="97.1489%" y="661" width="0.2100%" height="15" fill="rgb(209,164,1)" fg:x="342854" fg:w="741"/><text x="97.3989%" y="671.50"></text></g><g><title>std::io::Write::write_fmt (389 samples, 0.11%)</title><rect x="97.2486%" y="645" width="0.1102%" height="15" fill="rgb(213,184,43)" fg:x="343206" fg:w="389"/><text x="97.4986%" y="655.50"></text></g><g><title>core::fmt::write (389 samples, 0.11%)</title><rect x="97.2486%" y="629" width="0.1102%" height="15" fill="rgb(231,61,34)" fg:x="343206" fg:w="389"/><text x="97.4986%" y="639.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (319,005 samples, 90.39%)</title><rect x="6.9688%" y="853" width="90.3912%" height="15" fill="rgb(235,75,3)" fg:x="24594" fg:w="319005"/><text x="7.2188%" y="863.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (319,005 samples, 90.39%)</title><rect x="6.9688%" y="837" width="90.3912%" height="15" fill="rgb(220,106,47)" fg:x="24594" fg:w="319005"/><text x="7.2188%" y="847.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (319,005 samples, 90.39%)</title><rect x="6.9688%" y="821" width="90.3912%" height="15" fill="rgb(210,196,33)" fg:x="24594" fg:w="319005"/><text x="7.2188%" y="831.50">core::ops::function::FnOnce::call_once{{vtable-shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (319,005 samples, 90.39%)</title><rect x="6.9688%" y="805" width="90.3912%" height="15" fill="rgb(229,154,42)" fg:x="24594" fg:w="319005"/><text x="7.2188%" y="815.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>__GI___clone (319,073 samples, 90.41%)</title><rect x="6.9541%" y="901" width="90.4105%" height="15" fill="rgb(228,114,26)" fg:x="24542" fg:w="319073"/><text x="7.2041%" y="911.50">__GI___clone</text></g><g><title>start_thread (319,021 samples, 90.40%)</title><rect x="6.9688%" y="885" width="90.3957%" height="15" fill="rgb(208,144,1)" fg:x="24594" fg:w="319021"/><text x="7.2188%" y="895.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (319,021 samples, 90.40%)</title><rect x="6.9688%" y="869" width="90.3957%" height="15" fill="rgb(239,112,37)" fg:x="24594" fg:w="319021"/><text x="7.2188%" y="879.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (6,145 samples, 1.74%)</title><rect x="97.3739%" y="757" width="1.7412%" height="15" fill="rgb(210,96,50)" fg:x="343648" fg:w="6145"/><text x="97.6239%" y="767.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (6,145 samples, 1.74%)</title><rect x="97.3739%" y="741" width="1.7412%" height="15" fill="rgb(222,178,2)" fg:x="343648" fg:w="6145"/><text x="97.6239%" y="751.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (6,145 samples, 1.74%)</title><rect x="97.3739%" y="725" width="1.7412%" height="15" fill="rgb(226,74,18)" fg:x="343648" fg:w="6145"/><text x="97.6239%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::nth (8,582 samples, 2.43%)</title><rect x="97.3739%" y="885" width="2.4317%" height="15" fill="rgb(225,67,54)" fg:x="343648" fg:w="8582"/><text x="97.6239%" y="895.50">co..</text></g><g><title>&lt;core::iter::adapters::cycle::Cycle&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::advance_by (8,582 samples, 2.43%)</title><rect x="97.3739%" y="869" width="2.4317%" height="15" fill="rgb(251,92,32)" fg:x="343648" fg:w="8582"/><text x="97.6239%" y="879.50">&lt;c..</text></g><g><title>core::iter::traits::iterator::Iterator::advance_by (8,582 samples, 2.43%)</title><rect x="97.3739%" y="853" width="2.4317%" height="15" fill="rgb(228,149,22)" fg:x="343648" fg:w="8582"/><text x="97.6239%" y="863.50">co..</text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (8,582 samples, 2.43%)</title><rect x="97.3739%" y="837" width="2.4317%" height="15" fill="rgb(243,54,13)" fg:x="343648" fg:w="8582"/><text x="97.6239%" y="847.50">&lt;c..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (8,582 samples, 2.43%)</title><rect x="97.3739%" y="821" width="2.4317%" height="15" fill="rgb(243,180,28)" fg:x="343648" fg:w="8582"/><text x="97.6239%" y="831.50">&lt;c..</text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (8,582 samples, 2.43%)</title><rect x="97.3739%" y="805" width="2.4317%" height="15" fill="rgb(208,167,24)" fg:x="343648" fg:w="8582"/><text x="97.6239%" y="815.50">&lt;c..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (8,582 samples, 2.43%)</title><rect x="97.3739%" y="789" width="2.4317%" height="15" fill="rgb(245,73,45)" fg:x="343648" fg:w="8582"/><text x="97.6239%" y="799.50">co..</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (8,582 samples, 2.43%)</title><rect x="97.3739%" y="773" width="2.4317%" height="15" fill="rgb(237,203,48)" fg:x="343648" fg:w="8582"/><text x="97.6239%" y="783.50">&lt;c..</text></g><g><title>core::slice::memchr::memchr (2,437 samples, 0.69%)</title><rect x="99.1151%" y="757" width="0.6905%" height="15" fill="rgb(211,197,16)" fg:x="349793" fg:w="2437"/><text x="99.3651%" y="767.50"></text></g><g><title>lab4::package::PackageDownloader::run (8,585 samples, 2.43%)</title><rect x="97.3736%" y="901" width="2.4326%" height="15" fill="rgb(243,99,51)" fg:x="343647" fg:w="8585"/><text x="97.6236%" y="911.50">la..</text></g><g><title>lab4 (352,910 samples, 100.00%)</title><rect x="0.0000%" y="917" width="99.9983%" height="15" fill="rgb(215,123,29)" fg:x="0" fg:w="352910"/><text x="0.2500%" y="927.50">lab4</text></g><g><title>lab4::student::Student::run (678 samples, 0.19%)</title><rect x="99.8062%" y="901" width="0.1921%" height="15" fill="rgb(239,186,37)" fg:x="352232" fg:w="678"/><text x="100.0562%" y="911.50"></text></g><g><title>all (352,916 samples, 100%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(252,136,39)" fg:x="0" fg:w="352916"/><text x="0.2500%" y="943.50"></text></g></svg></svg>